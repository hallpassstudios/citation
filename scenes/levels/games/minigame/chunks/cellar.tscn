[gd_scene load_steps=46 format=2]

[ext_resource path="res://scenes/levels/games/minigame/joystick.gd" type="Script" id=1]
[ext_resource path="res://scenes/levels/games/minigame/new_tiles.tres" type="TileSet" id=2]
[ext_resource path="res://sprites/ui/mobile_thumbstick.png" type="Texture" id=3]
[ext_resource path="res://sprites/ui/mobile_joystick.png" type="Texture" id=4]
[ext_resource path="res://sprites/minigame/npcsLowResSheet.png" type="Texture" id=5]
[ext_resource path="res://scenes/levels/games/minigame/chunks/cellar.gd" type="Script" id=6]
[ext_resource path="res://sprites/minigame/quotes.png" type="Texture" id=7]
[ext_resource path="res://sprites/ui/border_bw.png" type="Texture" id=8]
[ext_resource path="res://sprites/minigame/door_2.png" type="Texture" id=9]
[ext_resource path="res://audio/sfx/item.mp3" type="AudioStream" id=10]

[sub_resource type="CircleShape2D" id=27]
radius = 64.0

[sub_resource type="DynamicFontData" id=1]
antialiased = false
font_path = "res://fonts/HungryPro.ttf"

[sub_resource type="DynamicFont" id=2]
size = 40
font_data = SubResource( 1 )

[sub_resource type="DynamicFont" id=6]
size = 30
font_data = SubResource( 1 )

[sub_resource type="StyleBoxFlat" id=7]
bg_color = Color( 0.207843, 0.0901961, 0.239216, 1 )
border_width_left = 1
border_width_top = 1
border_width_right = 1
border_width_bottom = 1
border_color = Color( 1, 1, 1, 1 )
anti_aliasing = false

[sub_resource type="StyleBoxFlat" id=8]
bg_color = Color( 0.133333, 0, 0.172549, 1 )
border_width_left = 1
border_width_top = 1
border_width_right = 1
border_width_bottom = 1

[sub_resource type="StyleBoxFlat" id=3]
bg_color = Color( 0.780392, 0, 1, 1 )

[sub_resource type="DynamicFontData" id=4]
antialiased = false
font_path = "res://fonts/HungryPro.ttf"

[sub_resource type="DynamicFont" id=5]
size = 50
font_data = SubResource( 4 )

[sub_resource type="RectangleShape2D" id=47]
extents = Vector2( 4, 5 )

[sub_resource type="RectangleShape2D" id=50]
extents = Vector2( 3, 5 )

[sub_resource type="Animation" id=57]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("CollisionShape2D/Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 48 ]
}

[sub_resource type="Animation" id=58]
resource_name = "idle_down"
length = 0.8
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("CollisionShape2D/Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 48, 49, 50, 51, 52, 53, 54, 55 ]
}

[sub_resource type="Animation" id=59]
resource_name = "idle_up"
length = 0.8
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("CollisionShape2D/Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 56, 57, 58, 59, 60, 61, 62, 63 ]
}

[sub_resource type="Animation" id=60]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("CollisionShape2D/Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0 ]
}

[sub_resource type="Animation" id=61]
resource_name = "idle_down"
length = 0.8
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("CollisionShape2D/Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 0, 1, 2, 3, 4, 5, 6, 7 ]
}

[sub_resource type="Animation" id=62]
resource_name = "idle_up"
length = 0.8
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("CollisionShape2D/Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 8, 9, 10, 11, 12, 13, 14, 15 ]
}

[sub_resource type="Animation" id=63]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("CollisionShape2D/Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 64 ]
}

[sub_resource type="Animation" id=64]
resource_name = "idle_down"
length = 0.8
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("CollisionShape2D/Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 64, 65, 66, 67, 68, 69, 70, 71 ]
}

[sub_resource type="Animation" id=65]
resource_name = "idle_up"
length = 0.8
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("CollisionShape2D/Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 72, 73 ]
}

[sub_resource type="Animation" id=66]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("CollisionShape2D/Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 16 ]
}

[sub_resource type="Animation" id=67]
resource_name = "idle_down"
length = 0.8
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("CollisionShape2D/Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 16, 17, 18, 19, 20, 21, 22, 23 ]
}

[sub_resource type="Animation" id=68]
resource_name = "idle_up"
length = 0.8
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("CollisionShape2D/Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 24, 25, 26, 27, 28, 29, 30, 31 ]
}

[sub_resource type="Animation" id=69]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("CollisionShape2D/Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 33 ]
}

[sub_resource type="Animation" id=70]
resource_name = "idle_down"
length = 0.8
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("CollisionShape2D/Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 32, 33, 34, 35, 36, 37, 38, 39 ]
}

[sub_resource type="Animation" id=71]
resource_name = "idle_up"
length = 0.8
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("CollisionShape2D/Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 40, 41, 42, 43, 44, 45, 46, 47 ]
}

[sub_resource type="RectangleShape2D" id=52]
extents = Vector2( 8, 8 )

[sub_resource type="RectangleShape2D" id=53]
extents = Vector2( 5, 5 )

[sub_resource type="DynamicFontData" id=45]
font_path = "res://fonts/zpix.ttf"

[sub_resource type="DynamicFont" id=51]
size = 12
font_data = SubResource( 45 )

[sub_resource type="DynamicFontData" id=54]
font_path = "res://fonts/zpix.ttf"

[sub_resource type="DynamicFont" id=55]
size = 12
font_data = SubResource( 54 )

[sub_resource type="RectangleShape2D" id=56]
extents = Vector2( 3, 5 )

[sub_resource type="Shader" id=72]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/VHS-and-CRT-monitor-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

//*** IMPORTANT! ***/ 
// - If you are using this shader to affect the node it is applied to set 'overlay' to false (unchecked in the instepctor).
// - If you are using this shader as an overlay, and want the shader to affect the nodes below in the Scene hierarchy,
//   set 'overlay' to true (checked in the inspector).
// On Mac there is potentially a bug causing this to not work properly. If that is the case and you want to use the shader as an overlay
// change all \"overlay ? SCREEN_TEXTURE : TEXTURE\" to only \"SCREEN_TEXTURE\" on lines 129-140, and \"vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV);\"
// to \"vec2 uv = warp(SCREEN_UV);\" on line 98.
uniform bool overlay = false;

uniform float scanlines_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float scanlines_width : hint_range(0.0, 0.5) = 0.25;
uniform float grille_opacity : hint_range(0.0, 1.0) = 0.3;
uniform vec2 resolution = vec2(640.0, 480.0); // Set the number of rows and columns the texture will be divided in. Scanlines and grille will make a square based on these values

uniform bool pixelate = true; // Fill each square (\"pixel\") with a sampled color, creating a pixel look and a more accurate representation of how a CRT monitor would work.

uniform bool roll = true;
uniform float roll_speed = 8.0; // Positive values are down, negative are up
uniform float roll_size : hint_range(0.0, 100.0) = 15.0;
uniform float roll_variation : hint_range(0.1, 5.0) = 1.8; // This valie is not an exact science. You have to play around with the value to find a look you like. How this works is explained in the code below.
uniform float distort_intensity : hint_range(0.0, 0.2) = 0.05; // The distortion created by the rolling effect.

uniform float noise_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float noise_speed = 5.0; // There is a movement in the noise pattern that can be hard to see first. This sets the speed of that movement.

uniform float static_noise_intensity : hint_range(0.0, 1.0) = 0.06;

uniform float aberration : hint_range(-1.0, 1.0) = 0.03; // Chromatic aberration, a distortion on each color channel.
uniform float brightness = 1.4; // When adding scanline gaps and grille the image can get very dark. Brightness tries to compensate for that.
uniform bool discolor = true; // Add a discolor effect simulating a VHS

uniform float warp_amount :hint_range(0.0, 5.0) = 1.0; // Warp the texture edges simulating the curved glass of a CRT monitor or old TV.
uniform bool clip_warp = false;

uniform float vignette_intensity = 0.4; // Size of the vignette, how far towards the middle it should go.
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

// Generate a Perlin noise used by the distortion effects
float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	return uv + delta * delta_offset;
}

// Adds a black border to hide stretched pixel created by the warp effect
float border (vec2 uv){
	float radius = min(warp_amount, 0.08);
	radius = max(min(min(abs(radius * 2.0), abs(1.0)), abs(1.0)), 1e-5);
	vec2 abs_uv = abs(uv * 2.0 - 1.0) - vec2(1.0, 1.0) + radius;
	float dist = length(max(vec2(0.0), abs_uv)) / radius;
	float square = smoothstep(0.96, 1.0, dist);
	return clamp(1.0 - square, 0.0, 1.0);
}

// Adds a vignette shadow to the edges of the image
float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment()
{
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); // Warp the uv. uv will be used in most cases instead of UV to keep the warping
	vec2 text_uv = uv;
	vec2 roll_uv = vec2(0.0);
	float time = roll ? TIME : 0.0;
	

	// Pixelate the texture based on the given resolution.
	if (pixelate)
	{
		text_uv = ceil(uv * resolution) / resolution;
	}
	
	// Create the rolling effect. We need roll_line a bit later to make the noise effect.
	// That is why this runs if roll is true OR noise_opacity is over 0.
	float roll_line = 0.0;
	if (roll || noise_opacity > 0.0)
	{
		// Create the areas/lines where the texture will be distorted.
		roll_line = smoothstep(0.3, 0.9, sin(uv.y * roll_size - (time * roll_speed) ) );
		// Create more lines of a different size and apply to the first set of lines. This creates a bit of variation.
		roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * roll_size * roll_variation - (time * roll_speed * roll_variation) ) );
		// Distort the UV where where the lines are
		roll_uv = vec2(( roll_line * distort_intensity * (1.-UV.x)), 0.0);
	}
	
	vec4 text;
	if (roll)
	{
		// If roll is true distort the texture with roll_uv. The texture is split up into RGB to 
		// make some chromatic aberration. We apply the aberration to the red and green channels accorging to the aberration parameter
		// and intensify it a bit in the roll distortion.
		text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(aberration, 0.0) * .1 ).g;
		text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
		text.a = 1.0;
	}
	else
	{
		// If roll is false only apply the aberration without any distorion. The aberration values are very small so the .1 is only 
		// to make the slider in the Inspector less sensitive.
		text.r = texture(SCREEN_TEXTURE, text_uv + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv - vec2(aberration, 0.0) * .1).g;
		text.b = texture(SCREEN_TEXTURE, text_uv).b;
		text.a = 1.0;
	}
	
	float r = text.r;
	float g = text.g;
	float b = text.b;
	
	uv = warp(UV);
	
	// CRT monitors don't have pixels but groups of red, green and blue dots or lines, called grille. We isolate the texture's color channels 
	// and divide it up in 3 offsetted lines to show the red, green and blue colors next to each other, with a small black gap between.
	if (grille_opacity > 0.0){
		
		float g_r = smoothstep(0.85, 0.95, abs(sin(uv.x * (resolution.x * 3.14159265))));
		r = mix(r, r * g_r, grille_opacity);
		
		float g_g = smoothstep(0.85, 0.95, abs(sin(1.05 + uv.x * (resolution.x * 3.14159265))));
		g = mix(g, g * g_g, grille_opacity);
		
		float b_b = smoothstep(0.85, 0.95, abs(sin(2.1 + uv.x * (resolution.x * 3.14159265))));
		b = mix(b, b * b_b, grille_opacity);
		
	}
	
	// Apply the grille to the texture's color channels and apply Brightness. Since the grille and the scanlines (below) make the image very dark you
	// can compensate by increasing the brightness.
	text.r = clamp(r * brightness, 0.0, 1.0);
	text.g = clamp(g * brightness, 0.0, 1.0);
	text.b = clamp(b * brightness, 0.0, 1.0);
	
	// Scanlines are the horizontal lines that make up the image on a CRT monitor. 
	// Here we are actual setting the black gap between each line, which I guess is not the right definition of the word, but you get the idea  
	float scanlines = 0.5;
	if (scanlines_opacity > 0.0)
	{
		// Same technique as above, create lines with sine and applying it to the texture. Smoothstep to allow setting the line size.
		scanlines = smoothstep(scanlines_width, scanlines_width + 0.5, abs(sin(uv.y * (resolution.y * 3.14159265))));
		text.rgb = mix(text.rgb, text.rgb * vec3(scanlines), scanlines_opacity);
	}
	
	// Apply the banded noise.
	if (noise_opacity > 0.0)
	{
		// Generate a noise pattern that is very stretched horizontally, and animate it with noise_speed
		float noise = smoothstep(0.4, 0.5, noise(uv * vec2(2.0, 200.0) + vec2(10.0, (TIME * (noise_speed))) ) );
		
		// We use roll_line (set above) to define how big the noise should be vertically (multiplying cuts off all black parts).
		// We also add in some basic noise with random() to break up the noise pattern above. The noise is sized according to 
		// the resolution value set in the inspector. If you don't like this look you can 
		// change \"ceil(uv * resolution) / resolution\" to only \"uv\" to make it less pixelated. Or multiply resolution with som value
		// greater than 1.0 to make them smaller.
		roll_line *= noise * scanlines * clamp(random((ceil(uv * resolution) / resolution) + vec2(TIME * 0.8, 0.0)).x + 0.8, 0.0, 1.0);
		// Add it to the texture based on noise_opacity
		text.rgb = clamp(mix(text.rgb, text.rgb + roll_line, noise_opacity), vec3(0.0), vec3(1.0));
	}
	
	// Apply static noise by generating it over the whole screen in the same way as above
	if (static_noise_intensity > 0.0)
	{
		text.rgb += clamp(random((ceil(uv * resolution) / resolution) + fract(TIME)).x, 0.0, 1.0) * static_noise_intensity;
	}
	
	// Apply a black border to hide imperfections caused by the warping.
	// Also apply the vignette
	text.rgb *= border(uv);
	text.rgb *= vignette(uv);
	// Hides the black border and make that area transparent. Good if you want to add the the texture on top an image of a TV or monitor.
	if (clip_warp)
	{
		text.a = border(uv);
	}
	
	// Apply discoloration to get a VHS look (lower saturation and higher contrast)
	// You can play with the values below or expose them in the Inspector.
	float saturation = 0.5;
	float contrast = 1.2;
	if (discolor)
	{
		// Saturation
		vec3 greyscale = vec3(text.r + text.g + text.b) / 3.;
		text.rgb = mix(text.rgb, greyscale, saturation);
		
		// Contrast
		float midpoint = pow(0.5, 2.2);
		text.rgb = (text.rgb - vec3(midpoint)) * contrast + midpoint;
	}
	
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id=73]
shader = SubResource( 72 )
shader_param/overlay = true
shader_param/scanlines_opacity = 0.0
shader_param/scanlines_width = 0.2
shader_param/grille_opacity = 0.126
shader_param/resolution = Vector2( 640, 480 )
shader_param/pixelate = false
shader_param/roll = false
shader_param/roll_speed = 2.0
shader_param/roll_size = 15.0
shader_param/roll_variation = 1.8
shader_param/distort_intensity = 0.028
shader_param/noise_opacity = 0.1
shader_param/noise_speed = 1.0
shader_param/static_noise_intensity = 0.06
shader_param/aberration = -0.005
shader_param/brightness = 1.4
shader_param/discolor = true
shader_param/warp_amount = 0.391
shader_param/clip_warp = false
shader_param/vignette_intensity = 0.4
shader_param/vignette_opacity = 0.5

[node name="courtroom" type="Node2D"]
script = ExtResource( 6 )

[node name="joystick" type="CanvasLayer" parent="."]
script = ExtResource( 1 )

[node name="TouchScreenButton" type="TouchScreenButton" parent="joystick"]
visible = false
modulate = Color( 1, 1, 1, 0.145098 )
normal = ExtResource( 4 )
shape = SubResource( 27 )
visibility_mode = 1

[node name="touch sprite" type="Sprite" parent="joystick"]
visible = false
position = Vector2( 32, 32 )
texture = ExtResource( 3 )

[node name="HUD" type="CanvasLayer" parent="."]

[node name="restart" type="Control" parent="HUD"]
pause_mode = 2
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect" type="ColorRect" parent="HUD/restart"]
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0.121569, 0.0980392, 0.0980392, 0.564706 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="VBoxContainer" type="VBoxContainer" parent="HUD/restart"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -286.0
margin_top = -94.0
margin_right = 286.0
margin_bottom = 94.0
custom_constants/separation = 10
__meta__ = {
"_edit_use_anchors_": false
}

[node name="title" type="Label" parent="HUD/restart/VBoxContainer"]
margin_right = 572.0
margin_bottom = 47.0
custom_fonts/font = SubResource( 2 )
text = "SORRY, YOU DIDN'T SUCCEED."
align = 1
valign = 1
autowrap = true

[node name="subtitle" type="Label" parent="HUD/restart/VBoxContainer"]
margin_top = 57.0
margin_right = 572.0
margin_bottom = 76.0
custom_fonts/font = SubResource( 6 )
custom_colors/font_color = Color( 0, 1, 0.823529, 1 )
text = "try again, joe is counting on you!"
align = 1
autowrap = true
uppercase = true

[node name="restart" type="Button" parent="HUD/restart/VBoxContainer"]
margin_top = 86.0
margin_right = 572.0
margin_bottom = 133.0
focus_mode = 0
mouse_filter = 1
custom_styles/hover = SubResource( 7 )
custom_styles/pressed = SubResource( 8 )
custom_styles/normal = SubResource( 3 )
custom_fonts/font = SubResource( 5 )
enabled_focus_mode = 0
text = "TRY AGAIN!"

[node name="quit" type="Button" parent="HUD/restart/VBoxContainer"]
margin_top = 143.0
margin_right = 572.0
margin_bottom = 196.0
focus_mode = 0
mouse_filter = 1
custom_fonts/font = SubResource( 5 )
enabled_focus_mode = 0
text = "QUIT GAME"
flat = true

[node name="question" type="Node2D" parent="."]
position = Vector2( -22, -51 )
z_index = 1

[node name="sort" type="YSort" parent="."]

[node name="spawner" type="Position2D" parent="sort"]
position = Vector2( 1, 0 )

[node name="wall tiles" type="TileMap" parent="sort"]
position = Vector2( 7.62939e-06, 0 )
tile_set = ExtResource( 2 )
cell_size = Vector2( 10, 10 )
show_collision = true
format = 1
tile_data = PoolIntArray( -851950, 49, 0, -851949, 49, 0, -851948, 49, 0, -851947, 49, 0, -851946, 49, 0, -851945, 49, 0, -851944, 49, 0, -851943, 49, 0, -851942, 49, 0, -851941, 49, 0, -851940, 49, 0, -851939, 49, 0, -851938, 49, 0, -786414, 49, 0, -786413, 49, 0, -786403, 49, 0, -786402, 49, 0, -720878, 49, 0, -720877, 49, 0, -720867, 49, 0, -720866, 49, 0, -655342, 49, 0, -655341, 49, 0, -655331, 49, 0, -655330, 49, 0, -589806, 49, 0, -589805, 49, 0, -589795, 49, 0, -589794, 49, 0, -458757, 49, 0, -458756, 49, 0, -458755, 49, 0, -458754, 49, 0, -458753, 49, 0, -524288, 49, 0, -524287, 49, 0, -524286, 49, 0, -524285, 49, 0, -524284, 49, 0, -524283, 49, 0, -524282, 49, 0, -524281, 49, 0, -524280, 49, 0, -524279, 49, 0, -524278, 49, 0, -524277, 49, 0, -524276, 49, 0, -524275, 49, 0, -524274, 49, 0, -524273, 49, 0, -524272, 49, 0, -524271, 49, 0, -524270, 49, 0, -524269, 49, 0, -524259, 49, 0, -524258, 49, 0, -393221, 49, 0, -393220, 49, 0, -393219, 49, 0, -393218, 49, 0, -393217, 49, 0, -458752, 49, 0, -458751, 49, 0, -458750, 49, 0, -458749, 49, 0, -458748, 49, 0, -458747, 49, 0, -458746, 49, 0, -458745, 49, 0, -458744, 49, 0, -458743, 49, 0, -458742, 49, 0, -458741, 49, 0, -458740, 49, 0, -458739, 49, 0, -458738, 49, 0, -458737, 49, 0, -458736, 49, 0, -458735, 49, 0, -458734, 49, 0, -458733, 49, 0, -458723, 49, 0, -458722, 49, 0, -327685, 49, 0, -327684, 49, 0, -393187, 49, 0, -393186, 49, 0, -262149, 49, 0, -262148, 49, 0, -327677, 49, 0, -327676, 49, 0, -327675, 49, 0, -327674, 49, 0, -327673, 49, 0, -327672, 49, 0, -327671, 49, 0, -327670, 49, 0, -327669, 49, 0, -327668, 49, 0, -327667, 49, 0, -327666, 49, 0, -327665, 49, 0, -327664, 49, 0, -327663, 49, 0, -327662, 49, 0, -327661, 49, 0, -327651, 49, 0, -327650, 49, 0, -196613, 49, 0, -196612, 49, 0, -262141, 49, 0, -262140, 49, 0, -262139, 49, 0, -262138, 49, 0, -262137, 49, 0, -262136, 49, 0, -262135, 49, 0, -262134, 49, 0, -262133, 49, 0, -262132, 49, 0, -262131, 49, 0, -262130, 49, 0, -262129, 49, 0, -262128, 49, 0, -262127, 49, 0, -262126, 49, 0, -262125, 49, 0, -262115, 49, 0, -262114, 49, 0, -131077, 49, 0, -131076, 49, 0, -196605, 49, 0, -196604, 49, 0, -196590, 49, 0, -196589, 49, 0, -196579, 49, 0, -196578, 49, 0, -65541, 49, 0, -65540, 49, 0, -131069, 49, 0, -131068, 49, 0, -131054, 49, 0, -131053, 49, 0, -131043, 49, 0, -131042, 49, 0, -5, 49, 0, -4, 49, 0, -65533, 49, 0, -65532, 49, 0, -65518, 49, 0, -65517, 49, 0, -65507, 49, 0, -65506, 49, 0, 65531, 49, 0, 65532, 49, 0, 4, 112, 0, 18, 49, 0, 19, 49, 0, 20, 49, 0, 21, 49, 0, 22, 49, 0, 23, 49, 0, 24, 49, 0, 25, 49, 0, 26, 49, 0, 27, 49, 0, 28, 49, 0, 29, 49, 0, 30, 49, 0, 131067, 49, 0, 131068, 49, 0, 131069, 49, 0, 131070, 49, 0, 131071, 49, 0, 65536, 49, 0, 65537, 49, 0, 65538, 49, 0, 65539, 49, 0, 65540, 49, 0, 65554, 49, 0, 65555, 49, 0, 65556, 49, 0, 65557, 49, 0, 65558, 49, 0, 65559, 49, 0, 65560, 49, 0, 65561, 49, 0, 65562, 49, 0, 65563, 49, 0, 65564, 49, 0, 65565, 49, 0, 65566, 49, 0, 196603, 49, 0, 196604, 49, 0, 196605, 49, 0, 196606, 49, 0, 196607, 49, 0, 131072, 49, 0, 131073, 49, 0, 131074, 49, 0, 131075, 49, 0, 131076, 49, 0 )

[node name="ground" type="TileMap" parent="sort"]
position = Vector2( 7.62939e-06, 0 )
tile_set = ExtResource( 2 )
cell_size = Vector2( 10, 10 )
show_collision = true
format = 1
tile_data = PoolIntArray( -393216, 12, 0, -393215, 12, 0, -262146, 12, 0 )

[node name="props" type="TileMap" parent="sort"]
position = Vector2( 7.62939e-06, 0 )
tile_set = ExtResource( 2 )
cell_size = Vector2( 10, 10 )
show_collision = true
format = 1
tile_data = PoolIntArray( -786412, 150, 0, -786411, 150, 0, -786410, 150, 0, -786409, 150, 0, -786408, 150, 0, -786407, 150, 0, -786406, 150, 0, -786405, 150, 0, -786404, 114, 0, -589801, 153, 0, -589798, 153, 0, -393216, 12, 0, -393215, 12, 0, -262146, 12, 0, -327657, 153, 0, -327654, 153, 0 )

[node name="spikes" type="TileMap" parent="sort" groups=[
"spikes",
]]
position = Vector2( 7.62939e-06, 0 )
tile_set = ExtResource( 2 )
cell_size = Vector2( 10, 10 )
show_collision = true
format = 1

[node name="exit" type="Area2D" parent="sort"]
position = Vector2( 0, 22 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="sort/exit"]
position = Vector2( 125, -385 )
shape = SubResource( 47 )

[node name="quotes" type="RigidBody2D" parent="sort"]
position = Vector2( 22, -12 )
mode = 2
mass = 100.0
gravity_scale = 0.0
linear_damp = 10.0
angular_damp = 1000.0

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="sort/quotes"]
polygon = PoolVector2Array( 0, -5, 3, -3, 3, 2, -3, 2, -3, -3 )

[node name="Sprite" type="Sprite" parent="sort/quotes/CollisionPolygon2D"]
texture = ExtResource( 7 )

[node name="quotes2" type="RigidBody2D" parent="sort"]
position = Vector2( -21, -12 )
mode = 2
mass = 100.0
gravity_scale = 0.0
linear_damp = 10.0
angular_damp = 1000.0

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="sort/quotes2"]
polygon = PoolVector2Array( 3, 2, 3, -2, 0, -5, -3, -2, -3, 2 )

[node name="Sprite" type="Sprite" parent="sort/quotes2/CollisionPolygon2D"]
texture = ExtResource( 7 )
flip_h = true

[node name="hatim" type="Area2D" parent="sort"]
position = Vector2( 226, -27 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="sort/hatim"]
position = Vector2( 0, -8 )
shape = SubResource( 50 )

[node name="Sprite" type="Sprite" parent="sort/hatim/CollisionShape2D"]
position = Vector2( -0.0108032, -1.17863 )
scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 5 )
hframes = 8
vframes = 10
frame = 48

[node name="AnimationPlayer" type="AnimationPlayer" parent="sort/hatim"]
autoplay = "idle_down"
anims/RESET = SubResource( 57 )
anims/idle_down = SubResource( 58 )
anims/idle_up = SubResource( 59 )

[node name="soojin" type="Area2D" parent="sort"]
position = Vector2( 226, -86 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="sort/soojin"]
position = Vector2( 0, 11 )
shape = SubResource( 50 )

[node name="Sprite" type="Sprite" parent="sort/soojin/CollisionShape2D"]
position = Vector2( -0.705475, -0.222725 )
scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 5 )
hframes = 8
vframes = 10

[node name="AnimationPlayer" type="AnimationPlayer" parent="sort/soojin"]
autoplay = "idle_down"
anims/RESET = SubResource( 60 )
anims/idle_down = SubResource( 61 )
anims/idle_up = SubResource( 62 )

[node name="zane" type="Area2D" parent="sort"]
position = Vector2( 256, -26 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="sort/zane"]
position = Vector2( 0, -9 )
shape = SubResource( 50 )

[node name="Sprite" type="Sprite" parent="sort/zane/CollisionShape2D"]
position = Vector2( -0.142059, -0.222717 )
scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 5 )
hframes = 8
vframes = 10
frame = 64

[node name="AnimationPlayer" type="AnimationPlayer" parent="sort/zane"]
autoplay = "idle_down"
anims/RESET = SubResource( 63 )
anims/idle_down = SubResource( 64 )
anims/idle_up = SubResource( 65 )

[node name="andrew" type="Area2D" parent="sort"]
position = Vector2( 256, -75 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="sort/andrew"]
shape = SubResource( 50 )

[node name="Sprite" type="Sprite" parent="sort/andrew/CollisionShape2D"]
position = Vector2( -0.679016, 0 )
scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 5 )
hframes = 8
vframes = 10
frame = 16

[node name="AnimationPlayer" type="AnimationPlayer" parent="sort/andrew"]
autoplay = "idle_down"
anims/RESET = SubResource( 66 )
anims/idle_down = SubResource( 67 )
anims/idle_up = SubResource( 68 )

[node name="judge" type="Area2D" parent="sort"]
position = Vector2( 258, -97 )
z_index = 1

[node name="CollisionShape2D" type="CollisionShape2D" parent="sort/judge"]
position = Vector2( 28, 43 )
shape = SubResource( 50 )

[node name="Sprite" type="Sprite" parent="sort/judge/CollisionShape2D"]
position = Vector2( -0.888519, 0 )
scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 5 )
flip_h = true
hframes = 8
vframes = 10
frame = 33

[node name="AnimationPlayer" type="AnimationPlayer" parent="sort/judge"]
autoplay = "idle_down"
anims/RESET = SubResource( 69 )
anims/idle_down = SubResource( 70 )
anims/idle_up = SubResource( 71 )

[node name="quote 1 area" type="Area2D" parent="sort"]
position = Vector2( -21, -50 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="sort/quote 1 area"]
shape = SubResource( 52 )

[node name="quote 2 area" type="Area2D" parent="sort"]
position = Vector2( 21, -50 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="sort/quote 2 area"]
shape = SubResource( 52 )

[node name="door" type="StaticBody2D" parent="sort"]
position = Vector2( 35, -55 )

[node name="success" type="AudioStreamPlayer2D" parent="sort/door"]
stream = ExtResource( 10 )

[node name="collider" type="CollisionShape2D" parent="sort/door"]
shape = SubResource( 53 )

[node name="Sprite" type="Sprite" parent="sort/door/collider"]
texture = ExtResource( 9 )

[node name="1" type="Label" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = 234.0
margin_top = -48.0
margin_right = 240.0
margin_bottom = 54.0
rect_scale = Vector2( 0.25, 0.25 )
size_flags_horizontal = 4
custom_fonts/font = SubResource( 51 )
text = "HATIM"
align = 1
valign = 1
autowrap = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="2" type="Label" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = 234.0
margin_top = -86.0
margin_right = 242.0
margin_bottom = 1.0
rect_scale = Vector2( 0.25, 0.25 )
size_flags_horizontal = 4
custom_fonts/font = SubResource( 51 )
text = "SOOJIN"
align = 1
valign = 1
autowrap = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="3" type="Label" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = 264.0
margin_top = -42.0
margin_right = 272.0
margin_bottom = 15.0
rect_scale = Vector2( 0.25, 0.25 )
size_flags_horizontal = 4
custom_fonts/font = SubResource( 51 )
text = "ZANE"
align = 1
valign = 1
autowrap = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="4" type="Label" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = 264.0
margin_top = -87.0
margin_right = 272.0
rect_scale = Vector2( 0.25, 0.25 )
size_flags_horizontal = 4
custom_fonts/font = SubResource( 51 )
text = "ANDREW"
align = 1
valign = 1
autowrap = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="statement 1" type="Node2D" parent="."]
position = Vector2( 309, -74 )
rotation = 1.57079
scale = Vector2( 0.5, 0.5 )
z_index = 1

[node name="border" type="NinePatchRect" parent="statement 1"]
margin_right = 82.0
margin_bottom = 36.0
texture = ExtResource( 8 )
patch_margin_left = 20
patch_margin_top = 18
patch_margin_right = 18
patch_margin_bottom = 18
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question text" type="Label" parent="statement 1/border"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -33.0
margin_top = -10.0
margin_right = 99.0
margin_bottom = 28.0
rect_scale = Vector2( 0.5, 0.5 )
size_flags_horizontal = 4
custom_fonts/font = SubResource( 51 )
text = "the honorablish judge judy"
align = 1
valign = 1
autowrap = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question 4" type="Node2D" parent="."]
position = Vector2( 7.62939e-06, -21 )
z_index = 1

[node name="question text" type="Label" parent="question 4"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -16.0
margin_top = -11.0
margin_right = 116.0
margin_bottom = 31.0
rect_scale = Vector2( 0.25, 0.25 )
size_flags_horizontal = 4
custom_fonts/font = SubResource( 55 )
text = "- 老子"
align = 1
valign = 1
autowrap = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question 5" type="Node2D" parent="."]
position = Vector2( 7.62939e-06, -9 )
z_index = 1

[node name="question text" type="Label" parent="question 5"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -16.0
margin_top = -38.0
margin_right = 116.0
margin_bottom = 4.0
rect_scale = Vector2( 0.25, 0.25 )
size_flags_horizontal = 4
custom_fonts/font = SubResource( 55 )
text = "The journey of a thousand miles begins with one step."
align = 1
valign = 1
autowrap = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="exit" type="Area2D" parent="."]
position = Vector2( 47, 5 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="exit"]
shape = SubResource( 56 )

[node name="effects" type="CanvasLayer" parent="."]

[node name="ColorRect" type="ColorRect" parent="effects"]
material = SubResource( 73 )
anchor_right = 1.0
anchor_bottom = 1.0
rect_min_size = Vector2( 640, 360 )
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}

[connection signal="pressed" from="HUD/restart/VBoxContainer/restart" to="." method="_on_restart_pressed"]
[connection signal="pressed" from="HUD/restart/VBoxContainer/quit" to="." method="_on_quit_pressed"]
[connection signal="body_entered" from="sort/hatim" to="." method="_on_person_1_body_entered"]
[connection signal="body_entered" from="sort/soojin" to="." method="_on_person_2_body_entered"]
[connection signal="body_entered" from="sort/zane" to="." method="_on_person_3_body_entered"]
[connection signal="body_entered" from="sort/andrew" to="." method="_on_person_4_body_entered"]
[connection signal="body_entered" from="sort/judge" to="." method="_on_judge_body_entered"]
[connection signal="body_entered" from="sort/quote 1 area" to="." method="_on_quote_1_area_body_entered"]
[connection signal="body_entered" from="sort/quote 2 area" to="." method="_on_quote_2_area_body_entered"]
[connection signal="body_entered" from="exit" to="." method="_on_exit_body_entered"]

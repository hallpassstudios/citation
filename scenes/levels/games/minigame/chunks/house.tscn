[gd_scene load_steps=51 format=2]

[ext_resource path="res://scenes/levels/games/minigame/joystick.gd" type="Script" id=1]
[ext_resource path="res://scenes/levels/games/minigame/new_tiles.tres" type="TileSet" id=2]
[ext_resource path="res://sprites/ui/mobile_thumbstick.png" type="Texture" id=3]
[ext_resource path="res://sprites/ui/mobile_joystick.png" type="Texture" id=4]
[ext_resource path="res://sprites/ui/border_bw.png" type="Texture" id=5]
[ext_resource path="res://scenes/levels/games/minigame/chunks/house.gd" type="Script" id=6]
[ext_resource path="res://sprites/minigame/bookcase.png" type="Texture" id=7]
[ext_resource path="res://sprites/minigame/spikes.png" type="Texture" id=8]
[ext_resource path="res://sprites/minigame/table.png" type="Texture" id=9]
[ext_resource path="res://sprites/minigame/key.png" type="Texture" id=10]
[ext_resource path="res://sprites/minigame/door.png" type="Texture" id=11]
[ext_resource path="res://audio/sfx/item.mp3" type="AudioStream" id=12]
[ext_resource path="res://audio/sfx/door_close.mp3" type="AudioStream" id=13]
[ext_resource path="res://scenes/levels/options.gd" type="Script" id=14]
[ext_resource path="res://sprites/ui/settings_button_pressed.png" type="Texture" id=15]
[ext_resource path="res://sprites/ui/settings_button.png" type="Texture" id=16]

[sub_resource type="DynamicFontData" id=56]
font_path = "res://fonts/zpix.ttf"

[sub_resource type="DynamicFont" id=46]
size = 12
font_data = SubResource( 56 )

[sub_resource type="CircleShape2D" id=27]
radius = 64.0

[sub_resource type="DynamicFontData" id=1]
antialiased = false
font_path = "res://fonts/HungryPro.ttf"

[sub_resource type="DynamicFont" id=2]
size = 40
font_data = SubResource( 1 )

[sub_resource type="DynamicFont" id=6]
size = 30
font_data = SubResource( 1 )

[sub_resource type="StyleBoxFlat" id=7]
bg_color = Color( 0.207843, 0.0901961, 0.239216, 1 )
border_width_left = 1
border_width_top = 1
border_width_right = 1
border_width_bottom = 1
border_color = Color( 1, 1, 1, 1 )
anti_aliasing = false

[sub_resource type="StyleBoxFlat" id=8]
bg_color = Color( 0.133333, 0, 0.172549, 1 )
border_width_left = 1
border_width_top = 1
border_width_right = 1
border_width_bottom = 1

[sub_resource type="StyleBoxFlat" id=3]
bg_color = Color( 0.780392, 0, 1, 1 )

[sub_resource type="DynamicFontData" id=4]
antialiased = false
font_path = "res://fonts/HungryPro.ttf"

[sub_resource type="DynamicFont" id=5]
size = 50
font_data = SubResource( 4 )

[sub_resource type="DynamicFontData" id=60]
font_path = "res://fonts/zpix.ttf"

[sub_resource type="DynamicFont" id=55]
size = 12
font_data = SubResource( 60 )

[sub_resource type="RectangleShape2D" id=47]
extents = Vector2( 4, 5 )

[sub_resource type="RectangleShape2D" id=59]
extents = Vector2( 3, 5 )

[sub_resource type="RectangleShape2D" id=48]
extents = Vector2( 5, 5 )

[sub_resource type="RectangleShape2D" id=49]
extents = Vector2( 8.98099, 15 )

[sub_resource type="RectangleShape2D" id=50]
extents = Vector2( 25, 5 )

[sub_resource type="RectangleShape2D" id=51]
extents = Vector2( 25, 5 )

[sub_resource type="RectangleShape2D" id=52]
extents = Vector2( 4, 4 )

[sub_resource type="RectangleShape2D" id=53]
extents = Vector2( 4, 4 )

[sub_resource type="RectangleShape2D" id=57]
extents = Vector2( 4, 4 )

[sub_resource type="RectangleShape2D" id=58]
extents = Vector2( 4, 6 )

[sub_resource type="RectangleShape2D" id=54]
extents = Vector2( 4, 4 )

[sub_resource type="Shader" id=61]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/VHS-and-CRT-monitor-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

//*** IMPORTANT! ***/ 
// - If you are using this shader to affect the node it is applied to set 'overlay' to false (unchecked in the instepctor).
// - If you are using this shader as an overlay, and want the shader to affect the nodes below in the Scene hierarchy,
//   set 'overlay' to true (checked in the inspector).
// On Mac there is potentially a bug causing this to not work properly. If that is the case and you want to use the shader as an overlay
// change all \"overlay ? SCREEN_TEXTURE : TEXTURE\" to only \"SCREEN_TEXTURE\" on lines 129-140, and \"vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV);\"
// to \"vec2 uv = warp(SCREEN_UV);\" on line 98.
uniform bool overlay = false;

uniform float scanlines_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float scanlines_width : hint_range(0.0, 0.5) = 0.25;
uniform float grille_opacity : hint_range(0.0, 1.0) = 0.3;
uniform vec2 resolution = vec2(640.0, 480.0); // Set the number of rows and columns the texture will be divided in. Scanlines and grille will make a square based on these values

uniform bool pixelate = true; // Fill each square (\"pixel\") with a sampled color, creating a pixel look and a more accurate representation of how a CRT monitor would work.

uniform bool roll = true;
uniform float roll_speed = 8.0; // Positive values are down, negative are up
uniform float roll_size : hint_range(0.0, 100.0) = 15.0;
uniform float roll_variation : hint_range(0.1, 5.0) = 1.8; // This valie is not an exact science. You have to play around with the value to find a look you like. How this works is explained in the code below.
uniform float distort_intensity : hint_range(0.0, 0.2) = 0.05; // The distortion created by the rolling effect.

uniform float noise_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float noise_speed = 5.0; // There is a movement in the noise pattern that can be hard to see first. This sets the speed of that movement.

uniform float static_noise_intensity : hint_range(0.0, 1.0) = 0.06;

uniform float aberration : hint_range(-1.0, 1.0) = 0.03; // Chromatic aberration, a distortion on each color channel.
uniform float brightness = 1.4; // When adding scanline gaps and grille the image can get very dark. Brightness tries to compensate for that.
uniform bool discolor = true; // Add a discolor effect simulating a VHS

uniform float warp_amount :hint_range(0.0, 5.0) = 1.0; // Warp the texture edges simulating the curved glass of a CRT monitor or old TV.
uniform bool clip_warp = false;

uniform float vignette_intensity = 0.4; // Size of the vignette, how far towards the middle it should go.
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

// Generate a Perlin noise used by the distortion effects
float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	return uv + delta * delta_offset;
}

// Adds a black border to hide stretched pixel created by the warp effect
float border (vec2 uv){
	float radius = min(warp_amount, 0.08);
	radius = max(min(min(abs(radius * 2.0), abs(1.0)), abs(1.0)), 1e-5);
	vec2 abs_uv = abs(uv * 2.0 - 1.0) - vec2(1.0, 1.0) + radius;
	float dist = length(max(vec2(0.0), abs_uv)) / radius;
	float square = smoothstep(0.96, 1.0, dist);
	return clamp(1.0 - square, 0.0, 1.0);
}

// Adds a vignette shadow to the edges of the image
float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment()
{
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); // Warp the uv. uv will be used in most cases instead of UV to keep the warping
	vec2 text_uv = uv;
	vec2 roll_uv = vec2(0.0);
	float time = roll ? TIME : 0.0;
	

	// Pixelate the texture based on the given resolution.
	if (pixelate)
	{
		text_uv = ceil(uv * resolution) / resolution;
	}
	
	// Create the rolling effect. We need roll_line a bit later to make the noise effect.
	// That is why this runs if roll is true OR noise_opacity is over 0.
	float roll_line = 0.0;
	if (roll || noise_opacity > 0.0)
	{
		// Create the areas/lines where the texture will be distorted.
		roll_line = smoothstep(0.3, 0.9, sin(uv.y * roll_size - (time * roll_speed) ) );
		// Create more lines of a different size and apply to the first set of lines. This creates a bit of variation.
		roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * roll_size * roll_variation - (time * roll_speed * roll_variation) ) );
		// Distort the UV where where the lines are
		roll_uv = vec2(( roll_line * distort_intensity * (1.-UV.x)), 0.0);
	}
	
	vec4 text;
	if (roll)
	{
		// If roll is true distort the texture with roll_uv. The texture is split up into RGB to 
		// make some chromatic aberration. We apply the aberration to the red and green channels accorging to the aberration parameter
		// and intensify it a bit in the roll distortion.
		text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(aberration, 0.0) * .1 ).g;
		text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
		text.a = 1.0;
	}
	else
	{
		// If roll is false only apply the aberration without any distorion. The aberration values are very small so the .1 is only 
		// to make the slider in the Inspector less sensitive.
		text.r = texture(SCREEN_TEXTURE, text_uv + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv - vec2(aberration, 0.0) * .1).g;
		text.b = texture(SCREEN_TEXTURE, text_uv).b;
		text.a = 1.0;
	}
	
	float r = text.r;
	float g = text.g;
	float b = text.b;
	
	uv = warp(UV);
	
	// CRT monitors don't have pixels but groups of red, green and blue dots or lines, called grille. We isolate the texture's color channels 
	// and divide it up in 3 offsetted lines to show the red, green and blue colors next to each other, with a small black gap between.
	if (grille_opacity > 0.0){
		
		float g_r = smoothstep(0.85, 0.95, abs(sin(uv.x * (resolution.x * 3.14159265))));
		r = mix(r, r * g_r, grille_opacity);
		
		float g_g = smoothstep(0.85, 0.95, abs(sin(1.05 + uv.x * (resolution.x * 3.14159265))));
		g = mix(g, g * g_g, grille_opacity);
		
		float b_b = smoothstep(0.85, 0.95, abs(sin(2.1 + uv.x * (resolution.x * 3.14159265))));
		b = mix(b, b * b_b, grille_opacity);
		
	}
	
	// Apply the grille to the texture's color channels and apply Brightness. Since the grille and the scanlines (below) make the image very dark you
	// can compensate by increasing the brightness.
	text.r = clamp(r * brightness, 0.0, 1.0);
	text.g = clamp(g * brightness, 0.0, 1.0);
	text.b = clamp(b * brightness, 0.0, 1.0);
	
	// Scanlines are the horizontal lines that make up the image on a CRT monitor. 
	// Here we are actual setting the black gap between each line, which I guess is not the right definition of the word, but you get the idea  
	float scanlines = 0.5;
	if (scanlines_opacity > 0.0)
	{
		// Same technique as above, create lines with sine and applying it to the texture. Smoothstep to allow setting the line size.
		scanlines = smoothstep(scanlines_width, scanlines_width + 0.5, abs(sin(uv.y * (resolution.y * 3.14159265))));
		text.rgb = mix(text.rgb, text.rgb * vec3(scanlines), scanlines_opacity);
	}
	
	// Apply the banded noise.
	if (noise_opacity > 0.0)
	{
		// Generate a noise pattern that is very stretched horizontally, and animate it with noise_speed
		float noise = smoothstep(0.4, 0.5, noise(uv * vec2(2.0, 200.0) + vec2(10.0, (TIME * (noise_speed))) ) );
		
		// We use roll_line (set above) to define how big the noise should be vertically (multiplying cuts off all black parts).
		// We also add in some basic noise with random() to break up the noise pattern above. The noise is sized according to 
		// the resolution value set in the inspector. If you don't like this look you can 
		// change \"ceil(uv * resolution) / resolution\" to only \"uv\" to make it less pixelated. Or multiply resolution with som value
		// greater than 1.0 to make them smaller.
		roll_line *= noise * scanlines * clamp(random((ceil(uv * resolution) / resolution) + vec2(TIME * 0.8, 0.0)).x + 0.8, 0.0, 1.0);
		// Add it to the texture based on noise_opacity
		text.rgb = clamp(mix(text.rgb, text.rgb + roll_line, noise_opacity), vec3(0.0), vec3(1.0));
	}
	
	// Apply static noise by generating it over the whole screen in the same way as above
	if (static_noise_intensity > 0.0)
	{
		text.rgb += clamp(random((ceil(uv * resolution) / resolution) + fract(TIME)).x, 0.0, 1.0) * static_noise_intensity;
	}
	
	// Apply a black border to hide imperfections caused by the warping.
	// Also apply the vignette
	text.rgb *= border(uv);
	text.rgb *= vignette(uv);
	// Hides the black border and make that area transparent. Good if you want to add the the texture on top an image of a TV or monitor.
	if (clip_warp)
	{
		text.a = border(uv);
	}
	
	// Apply discoloration to get a VHS look (lower saturation and higher contrast)
	// You can play with the values below or expose them in the Inspector.
	float saturation = 0.5;
	float contrast = 1.2;
	if (discolor)
	{
		// Saturation
		vec3 greyscale = vec3(text.r + text.g + text.b) / 3.;
		text.rgb = mix(text.rgb, greyscale, saturation);
		
		// Contrast
		float midpoint = pow(0.5, 2.2);
		text.rgb = (text.rgb - vec3(midpoint)) * contrast + midpoint;
	}
	
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id=62]
shader = SubResource( 61 )
shader_param/overlay = true
shader_param/scanlines_opacity = 0.0
shader_param/scanlines_width = 0.2
shader_param/grille_opacity = 0.126
shader_param/resolution = Vector2( 640, 480 )
shader_param/pixelate = false
shader_param/roll = false
shader_param/roll_speed = 2.0
shader_param/roll_size = 15.0
shader_param/roll_variation = 1.8
shader_param/distort_intensity = 0.028
shader_param/noise_opacity = 0.1
shader_param/noise_speed = 1.0
shader_param/static_noise_intensity = 0.06
shader_param/aberration = -0.005
shader_param/brightness = 1.4
shader_param/discolor = true
shader_param/warp_amount = 0.391
shader_param/clip_warp = false
shader_param/vignette_intensity = 0.4
shader_param/vignette_opacity = 0.5

[sub_resource type="DynamicFontData" id=63]
antialiased = false
font_path = "res://fonts/HungryPro.ttf"

[sub_resource type="DynamicFont" id=64]
size = 20
font_data = SubResource( 63 )

[sub_resource type="DynamicFontData" id=65]
antialiased = false
font_path = "res://fonts/HungryPro.ttf"

[sub_resource type="DynamicFont" id=66]
size = 32
font_data = SubResource( 65 )

[sub_resource type="DynamicFontData" id=67]
antialiased = false
font_path = "res://fonts/HungryPro.ttf"

[sub_resource type="DynamicFont" id=68]
size = 18
font_data = SubResource( 67 )

[sub_resource type="DynamicFontData" id=69]
antialiased = false
font_path = "res://fonts/HungryPro.ttf"

[sub_resource type="DynamicFont" id=70]
size = 20
font_data = SubResource( 69 )

[node name="house" type="Node2D"]
script = ExtResource( 6 )

[node name="arrow2" type="Label" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -38.0
margin_top = -72.0
margin_right = 152.0
margin_bottom = -30.0
rect_scale = Vector2( 0.5, 0.5 )
size_flags_horizontal = 4
custom_fonts/font = SubResource( 46 )
text = "(╯°□°)╯︵ ┻━┻"
align = 1
valign = 1
autowrap = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="joystick" type="CanvasLayer" parent="."]
script = ExtResource( 1 )

[node name="TouchScreenButton" type="TouchScreenButton" parent="joystick"]
visible = false
modulate = Color( 1, 1, 1, 0.145098 )
normal = ExtResource( 4 )
shape = SubResource( 27 )
visibility_mode = 1

[node name="touch sprite" type="Sprite" parent="joystick"]
visible = false
position = Vector2( 32, 32 )
texture = ExtResource( 3 )

[node name="HUD" type="CanvasLayer" parent="."]
layer = 2

[node name="restart" type="Control" parent="HUD"]
pause_mode = 2
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect" type="ColorRect" parent="HUD/restart"]
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0.121569, 0.0980392, 0.0980392, 0.564706 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="VBoxContainer" type="VBoxContainer" parent="HUD/restart"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -286.0
margin_top = -94.0
margin_right = 286.0
margin_bottom = 94.0
custom_constants/separation = 10
__meta__ = {
"_edit_use_anchors_": false
}

[node name="title" type="Label" parent="HUD/restart/VBoxContainer"]
margin_right = 572.0
margin_bottom = 37.0
custom_fonts/font = SubResource( 2 )
text = "SORRY, YOU DIDN'T SUCCEED."
align = 1
valign = 1
autowrap = true

[node name="subtitle" type="Label" parent="HUD/restart/VBoxContainer"]
margin_top = 47.0
margin_right = 572.0
margin_bottom = 75.0
custom_fonts/font = SubResource( 6 )
custom_colors/font_color = Color( 0, 1, 0.823529, 1 )
text = "try again, joe is counting on you!"
align = 1
autowrap = true
uppercase = true

[node name="restart" type="Button" parent="HUD/restart/VBoxContainer"]
margin_top = 85.0
margin_right = 572.0
margin_bottom = 132.0
focus_mode = 0
mouse_filter = 1
custom_styles/hover = SubResource( 7 )
custom_styles/pressed = SubResource( 8 )
custom_styles/normal = SubResource( 3 )
custom_fonts/font = SubResource( 5 )
enabled_focus_mode = 0
text = "TRY AGAIN!"

[node name="quit" type="Button" parent="HUD/restart/VBoxContainer"]
margin_top = 142.0
margin_right = 572.0
margin_bottom = 195.0
focus_mode = 0
mouse_filter = 1
custom_fonts/font = SubResource( 5 )
enabled_focus_mode = 0
text = "QUIT GAME"
flat = true

[node name="question" type="Node2D" parent="."]
position = Vector2( -22, -51 )
z_index = 1

[node name="border" type="NinePatchRect" parent="question"]
margin_left = -2.0
margin_top = 11.0
margin_right = 80.0
margin_bottom = 47.0
rect_scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 5 )
patch_margin_left = 20
patch_margin_top = 18
patch_margin_right = 18
patch_margin_bottom = 18
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question text" type="Label" parent="question/border"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -33.0
margin_top = -7.0
margin_right = 99.0
margin_bottom = 20.0
rect_scale = Vector2( 0.5, 0.5 )
size_flags_horizontal = 4
custom_fonts/font = SubResource( 46 )
text = "a community of the mind"
align = 1
valign = 1
autowrap = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question 2" type="Node2D" parent="."]
position = Vector2( -26, -99 )
z_index = 1

[node name="border" type="NinePatchRect" parent="question 2"]
margin_right = 82.0
margin_bottom = 36.0
rect_scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 5 )
patch_margin_left = 20
patch_margin_top = 18
patch_margin_right = 18
patch_margin_bottom = 18
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question text" type="Label" parent="question 2/border"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -33.0
margin_top = -10.0
margin_right = 99.0
margin_bottom = 32.0
rect_scale = Vector2( 0.5, 0.5 )
size_flags_horizontal = 4
custom_fonts/font = SubResource( 46 )
text = "members only"
align = 1
valign = 1
autowrap = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question 6" type="Node2D" parent="."]
position = Vector2( 51, -70 )
z_index = 1

[node name="border" type="NinePatchRect" parent="question 6"]
margin_right = 82.0
margin_bottom = 36.0
rect_scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 5 )
patch_margin_left = 20
patch_margin_top = 18
patch_margin_right = 18
patch_margin_bottom = 18
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question text" type="Label" parent="question 6/border"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -33.0
margin_top = -10.0
margin_right = 99.0
margin_bottom = 28.0
rect_scale = Vector2( 0.5, 0.5 )
size_flags_horizontal = 4
custom_fonts/font = SubResource( 46 )
text = "cheating on an exam"
align = 1
valign = 1
autowrap = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question 8" type="Node2D" parent="."]
position = Vector2( 101, -70 )
z_index = 1

[node name="border" type="NinePatchRect" parent="question 8"]
margin_right = 82.0
margin_bottom = 36.0
rect_scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 5 )
patch_margin_left = 20
patch_margin_top = 18
patch_margin_right = 18
patch_margin_bottom = 18
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question text" type="Label" parent="question 8/border"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -33.0
margin_top = -10.0
margin_right = 99.0
margin_bottom = 28.0
rect_scale = Vector2( 0.5, 0.5 )
size_flags_horizontal = 4
custom_fonts/font = SubResource( 46 )
text = "falsifying data"
align = 1
valign = 1
autowrap = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question 9" type="Node2D" parent="."]
position = Vector2( 150, -70 )
z_index = 1

[node name="border" type="NinePatchRect" parent="question 9"]
margin_right = 82.0
margin_bottom = 36.0
rect_scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 5 )
patch_margin_left = 20
patch_margin_top = 18
patch_margin_right = 18
patch_margin_bottom = 18
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question text" type="Label" parent="question 9/border"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -33.0
margin_top = -10.0
margin_right = 99.0
margin_bottom = 28.0
rect_scale = Vector2( 0.5, 0.5 )
size_flags_horizontal = 4
custom_fonts/font = SubResource( 46 )
text = "having someone else write a paper"
align = 1
valign = 1
autowrap = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question 10" type="Node2D" parent="."]
position = Vector2( 202, -70 )
z_index = 1

[node name="border" type="NinePatchRect" parent="question 10"]
margin_right = 82.0
margin_bottom = 36.0
rect_scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 5 )
patch_margin_left = 20
patch_margin_top = 18
patch_margin_right = 18
patch_margin_bottom = 18
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question text" type="Label" parent="question 10/border"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -33.0
margin_top = -10.0
margin_right = 99.0
margin_bottom = 28.0
rect_scale = Vector2( 0.5, 0.5 )
size_flags_horizontal = 4
custom_fonts/font = SubResource( 46 )
text = "will cause you to lose your membership"
align = 1
valign = 1
autowrap = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question 3" type="Node2D" parent="."]
position = Vector2( -18, -190 )
z_index = 1

[node name="border" type="NinePatchRect" parent="question 3"]
margin_left = -19.0
margin_top = -8.0
margin_right = 63.0
margin_bottom = 28.0
texture = ExtResource( 5 )
patch_margin_left = 20
patch_margin_top = 18
patch_margin_right = 18
patch_margin_bottom = 18
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question text" type="Label" parent="question 3/border"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -33.0
margin_top = -10.0
margin_right = 99.0
margin_bottom = 28.0
rect_scale = Vector2( 0.5, 0.5 )
size_flags_horizontal = 4
custom_fonts/font = SubResource( 46 )
text = "academic integrity?"
align = 1
valign = 1
autowrap = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question 4" type="Node2D" parent="."]
position = Vector2( -81, -189 )
z_index = 1

[node name="question text" type="Label" parent="question 4"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = 2.0
margin_top = 4.0
margin_right = 134.0
margin_bottom = 46.0
rect_scale = Vector2( 0.25, 0.25 )
size_flags_horizontal = 4
custom_fonts/font = SubResource( 55 )
text = "< it's everyone's responsibility"
align = 1
valign = 1
autowrap = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question 5" type="Node2D" parent="."]
position = Vector2( 49, -190 )
z_index = 1

[node name="question text" type="Label" parent="question 5"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = 11.0
margin_top = 6.0
margin_right = 143.0
margin_bottom = 48.0
rect_scale = Vector2( 0.25, 0.25 )
size_flags_horizontal = 4
custom_fonts/font = SubResource( 46 )
text = "depends on your academic tradition >"
align = 1
valign = 1
autowrap = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question 7" type="Node2D" parent="."]
position = Vector2( 105, -209 )
z_index = 1

[node name="border" type="NinePatchRect" parent="question 7"]
margin_right = 82.0
margin_bottom = 36.0
rect_scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 5 )
patch_margin_left = 20
patch_margin_top = 18
patch_margin_right = 18
patch_margin_bottom = 18
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question text" type="Label" parent="question 7/border"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -33.0
margin_top = -12.0
margin_right = 99.0
margin_bottom = 30.0
rect_scale = Vector2( 0.5, 0.5 )
size_flags_horizontal = 4
custom_fonts/font = SubResource( 46 )
text = "who cares if others are hurt by my actions..."
align = 1
valign = 1
autowrap = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="sort" type="YSort" parent="."]

[node name="spawner" type="Position2D" parent="sort"]
position = Vector2( 4, 22 )

[node name="wall tiles" type="TileMap" parent="sort"]
position = Vector2( 7.62939e-06, 0 )
tile_set = ExtResource( 2 )
cell_size = Vector2( 10, 10 )
show_collision = true
format = 1
tile_data = PoolIntArray( -1507334, 74, 0, -1507333, 48, 0, -1507332, 48, 0, -1507331, 48, 0, -1507330, 48, 0, -1507329, 48, 0, -1572864, 48, 0, -1572863, 48, 0, -1572862, 48, 0, -1572861, 48, 0, -1572860, 48, 0, -1572859, 49, 0, -1572858, 54, 0, -1441798, 48, 0, -1441797, 48, 0, -1441796, 48, 0, -1441795, 48, 0, -1441794, 48, 0, -1441793, 48, 0, -1507328, 48, 0, -1507327, 48, 0, -1507326, 48, 0, -1507325, 48, 0, -1507324, 48, 0, -1507323, 48, 0, -1507322, 48, 0, -1376262, 48, 0, -1376261, 48, 0, -1376260, 48, 0, -1376259, 48, 0, -1376258, 48, 0, -1376257, 48, 0, -1441792, 48, 0, -1441791, 48, 0, -1441790, 48, 0, -1441789, 48, 0, -1441788, 48, 0, -1441787, 48, 0, -1441786, 48, 0, -1310738, 47, 0, -1310737, 48, 0, -1310736, 48, 0, -1310735, 48, 0, -1310734, 48, 0, -1310733, 48, 0, -1310732, 48, 0, -1310731, 48, 0, -1310730, 48, 0, -1310729, 48, 0, -1310728, 48, 0, -1310727, 48, 0, -1310726, 49, 0, -1310725, 49, 0, -1310724, 49, 0, -1310723, 49, 0, -1310722, 49, 0, -1310721, 49, 0, -1376256, 49, 0, -1376255, 49, 0, -1376254, 49, 0, -1376253, 49, 0, -1376252, 49, 0, -1376251, 49, 0, -1376250, 49, 0, -1376249, 48, 0, -1376248, 48, 0, -1376247, 48, 0, -1376246, 48, 0, -1376245, 48, 0, -1376244, 48, 0, -1376243, 48, 0, -1376242, 48, 0, -1376241, 49, 0, -1376240, 49, 0, -1376239, 49, 0, -1376238, 49, 0, -1376237, 49, 0, -1376236, 49, 0, -1376235, 49, 0, -1376234, 49, 0, -1376233, 49, 0, -1376232, 49, 0, -1376231, 49, 0, -1376230, 49, 0, -1376229, 49, 0, -1376228, 49, 0, -1376227, 47, 0, -1245202, 47, 0, -1245201, 49, 0, -1245200, 49, 0, -1245199, 49, 0, -1245198, 49, 0, -1245197, 49, 0, -1245196, 49, 0, -1245195, 49, 0, -1245194, 49, 0, -1245193, 49, 0, -1245192, 49, 0, -1245191, 49, 0, -1245190, 49, 0, -1310714, 49, 0, -1310713, 49, 0, -1310712, 49, 0, -1310711, 49, 0, -1310710, 49, 0, -1310709, 49, 0, -1310708, 49, 0, -1310707, 49, 0, -1310706, 49, 0, -1310692, 49, 0, -1310691, 47, 0, -1179666, 47, 0, -1179665, 49, 0, -1245156, 49, 0, -1245155, 47, 0, -1114130, 47, 0, -1179619, 47, 0, -1048594, 47, 0, -1048593, 49, 0, -1048592, 49, 0, -1048591, 49, 0, -1048590, 49, 0, -1048589, 49, 0, -1048588, 49, 0, -1048587, 49, 0, -1048586, 49, 0, -1048585, 49, 0, -1048584, 49, 0, -1048583, 49, 0, -1048582, 49, 0, -1114106, 49, 0, -1114105, 49, 0, -1114104, 49, 0, -1114103, 49, 0, -1114102, 49, 0, -1114101, 49, 0, -1114100, 49, 0, -1114099, 49, 0, -1114098, 49, 0, -1114092, 49, 0, -1114091, 49, 0, -1114090, 49, 0, -1114089, 49, 0, -1114088, 49, 0, -1114087, 49, 0, -1114086, 49, 0, -1114085, 49, 0, -1114084, 49, 0, -1114083, 47, 0, -983058, 47, 0, -983057, 47, 0, -983056, 47, 0, -983055, 47, 0, -983054, 47, 0, -983053, 47, 0, -983052, 47, 0, -983051, 47, 0, -983050, 47, 0, -983049, 47, 0, -983048, 47, 0, -983047, 47, 0, -983046, 49, 0, -983045, 49, 0, -983044, 49, 0, -983043, 49, 0, -1048573, 49, 0, -1048572, 49, 0, -1048571, 49, 0, -1048570, 49, 0, -1048569, 47, 0, -1048568, 47, 0, -1048567, 47, 0, -1048566, 47, 0, -1048565, 47, 0, -1048564, 47, 0, -1048563, 47, 0, -1048562, 49, 0, -1048556, 49, 0, -1048555, 47, 0, -1048554, 47, 0, -1048553, 47, 0, -1048552, 47, 0, -1048551, 47, 0, -1048550, 47, 0, -1048549, 47, 0, -1048548, 47, 0, -1048547, 47, 0, -917510, 47, 0, -917509, 47, 0, -917508, 47, 0, -917507, 49, 0, -983037, 49, 0, -983036, 47, 0, -983035, 47, 0, -983026, 49, 0, -983020, 49, 0, -851972, 49, 0, -851971, 49, 0, -917501, 49, 0, -917500, 49, 0, -917490, 49, 0, -917489, 49, 0, -917488, 49, 0, -917487, 49, 0, -917486, 49, 0, -917485, 49, 0, -917484, 49, 0, -786436, 49, 0, -786435, 49, 0, -851965, 49, 0, -851964, 49, 0, -720900, 49, 0, -720899, 49, 0, -786429, 47, 0, -786428, 49, 0, -655364, 49, 0, -655363, 49, 0, -720893, 47, 0, -720892, 47, 0, -589828, 49, 0, -589827, 49, 0, -589826, 49, 0, -589825, 49, 0, -655360, 47, 0, -655359, 49, 0, -655357, 49, 0, -655356, 49, 0, -524292, 49, 0, -524291, 47, 0, -524290, 47, 0, -524289, 47, 0, -589824, 47, 0, -589823, 47, 0, -589821, 49, 0, -589820, 49, 0, -196612, 79, 0, -196611, 79, 0, -196610, 79, 0, -196609, 79, 0, -262144, 79, 0, -262143, 79, 0, -262142, 87, 0, -262141, 79, 0, -131076, 49, 0, -131075, 49, 0, -131074, 49, 0, -131073, 49, 0, -196608, 49, 0, -196607, 49, 0, -196605, 49, 0, -65540, 49, 0, -131069, 49, 0, -4, 49, 0, -65533, 49, 0, 65532, 47, 0, 65533, 47, 0, 3, 49, 0, 131069, 47, 0, 65539, 49, 0, 196605, 47, 0, 131074, 161, 0, 131075, 47, 0, 262141, 47, 0, 262142, 47, 0, 262143, 47, 0, 196608, 114, 0, 196609, 47, 0, 196610, 47, 0, 196611, 47, 0 )

[node name="props" type="TileMap" parent="sort"]
position = Vector2( 7.62939e-06, 0 )
tile_set = ExtResource( 2 )
cell_size = Vector2( 10, 10 )
show_collision = true
format = 1
tile_data = PoolIntArray( -1310700, 165, 0, -1310699, 165, 0, -1310698, 165, 0, -1310697, 165, 0, -1310696, 165, 0, -1310695, 165, 0, -1310694, 165, 0, -1310693, 165, 0, -1179628, 166, 0, -1114097, 32, 0, -1114096, 30, 0, -65538, 158, 0, -65537, 155, 0, -131072, 157, 0, -3, 154, 0 )

[node name="spikes" type="TileMap" parent="sort" groups=[
"spikes",
]]
position = Vector2( 7.62939e-06, 0 )
tile_set = ExtResource( 2 )
cell_size = Vector2( 10, 10 )
show_collision = true
format = 1
tile_data = PoolIntArray( -1048561, 18, 0, -1048560, 18, 0, -1048559, 18, 0, -1048558, 18, 0, -1048557, 18, 0, -983025, 17, 0, -983024, 17, 0, -983023, 17, 0, -983022, 17, 0, -983021, 17, 0 )

[node name="doors" type="TileMap" parent="sort"]
z_index = 3
tile_set = ExtResource( 2 )
cell_size = Vector2( 10, 10 )
show_collision = true
format = 1
tile_data = PoolIntArray( -1114129, 112, 0, -1179620, 127, 0 )

[node name="exit" type="Area2D" parent="sort"]
position = Vector2( 0, 22 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="sort/exit"]
position = Vector2( 125, -385 )
shape = SubResource( 47 )

[node name="exit" type="Area2D" parent="."]
position = Vector2( -167, -175 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="exit"]
shape = SubResource( 59 )

[node name="hidden exit" type="Area2D" parent="."]
position = Vector2( 287, -175 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="hidden exit"]
position = Vector2( 7.62939e-06, 0 )
shape = SubResource( 59 )

[node name="bookcase" type="RigidBody2D" parent="."]
position = Vector2( 25, -25 )
z_index = 1
mode = 2
mass = 50.0
gravity_scale = 0.0
linear_damp = 100.0
angular_damp = 100.0

[node name="bookcase" type="Sprite" parent="bookcase"]
position = Vector2( 7.62939e-06, 0 )
texture = ExtResource( 7 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="bookcase"]
shape = SubResource( 48 )

[node name="trap" type="Area2D" parent="."]
position = Vector2( 160.038, -179.902 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="trap"]
position = Vector2( 30.962, 4.90164 )
shape = SubResource( 49 )

[node name="spikies" type="RigidBody2D" parent="."]
position = Vector2( 155, -195 )
rotation = -3.14159
collision_layer = 4
mode = 2
gravity_scale = 0.0
continuous_cd = 2
contact_monitor = true
can_sleep = false

[node name="CollisionShape2D" type="CollisionShape2D" parent="spikies"]
position = Vector2( -20, 0 )
shape = SubResource( 50 )

[node name="spike2" type="Sprite" parent="spikies"]
texture = ExtResource( 8 )

[node name="spike3" type="Sprite" parent="spikies"]
position = Vector2( -10, 0 )
texture = ExtResource( 8 )

[node name="spike4" type="Sprite" parent="spikies"]
position = Vector2( -20, 0 )
texture = ExtResource( 8 )

[node name="spike5" type="Sprite" parent="spikies"]
position = Vector2( -30, 0 )
texture = ExtResource( 8 )

[node name="spike6" type="Sprite" parent="spikies"]
position = Vector2( -40, 0 )
texture = ExtResource( 8 )

[node name="Area2D" type="Area2D" parent="spikies"]
position = Vector2( -1.90735e-06, 4.76837e-07 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="spikies/Area2D"]
position = Vector2( -20, 0 )
shape = SubResource( 51 )

[node name="table" type="RigidBody2D" parent="."]
position = Vector2( 72, -47 )
z_index = 1
gravity_scale = 0.0
linear_damp = 100.0

[node name="CollisionShape2D" type="CollisionShape2D" parent="table"]
shape = SubResource( 52 )

[node name="Sprite" type="Sprite" parent="table/CollisionShape2D"]
texture = ExtResource( 9 )

[node name="table 1" type="Area2D" parent="table"]

[node name="CollisionShape2D" type="CollisionShape2D" parent="table/table 1"]
shape = SubResource( 53 )

[node name="table2" type="RigidBody2D" parent="."]
position = Vector2( 123, -47 )
z_index = 1
gravity_scale = 0.0
linear_damp = 100.0

[node name="CollisionShape2D" type="CollisionShape2D" parent="table2"]
shape = SubResource( 52 )

[node name="Sprite" type="Sprite" parent="table2/CollisionShape2D"]
texture = ExtResource( 9 )

[node name="table 2" type="Area2D" parent="table2"]

[node name="CollisionShape2D" type="CollisionShape2D" parent="table2/table 2"]
shape = SubResource( 53 )

[node name="table3" type="RigidBody2D" parent="."]
position = Vector2( 172, -47 )
z_index = 1
gravity_scale = 0.0
linear_damp = 100.0

[node name="CollisionShape2D" type="CollisionShape2D" parent="table3"]
shape = SubResource( 52 )

[node name="Sprite" type="Sprite" parent="table3/CollisionShape2D"]
texture = ExtResource( 9 )

[node name="table 3" type="Area2D" parent="table3"]

[node name="CollisionShape2D" type="CollisionShape2D" parent="table3/table 3"]
shape = SubResource( 53 )

[node name="door" type="Area2D" parent="."]
position = Vector2( 25, -84.5 )

[node name="door_click" type="AudioStreamPlayer2D" parent="door"]
position = Vector2( -25, 84.5 )
stream = ExtResource( 13 )

[node name="StaticBody2D" type="StaticBody2D" parent="door"]

[node name="collider" type="CollisionShape2D" parent="door/StaticBody2D"]
shape = SubResource( 57 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="door"]
shape = SubResource( 58 )

[node name="Sprite" type="Sprite" parent="door/CollisionShape2D"]
texture = ExtResource( 11 )

[node name="key" type="Area2D" parent="."]
visible = false
position = Vector2( 223, -47 )

[node name="success" type="AudioStreamPlayer2D" parent="key"]
stream = ExtResource( 12 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="key"]
shape = SubResource( 54 )

[node name="Sprite" type="Sprite" parent="key/CollisionShape2D"]
texture = ExtResource( 10 )

[node name="effects" type="CanvasLayer" parent="."]

[node name="ColorRect" type="ColorRect" parent="effects"]
material = SubResource( 62 )
anchor_right = 1.0
anchor_bottom = 1.0
rect_min_size = Vector2( 640, 360 )
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="options" type="CanvasLayer" parent="."]
script = ExtResource( 14 )

[node name="ColorRect" type="ColorRect" parent="options"]
anchor_right = 1.0
margin_bottom = 25.0
rect_min_size = Vector2( 0, 25 )
color = Color( 0, 0, 0, 0.913725 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Settings Button" type="TextureButton" parent="options"]
anchor_left = 0.979
anchor_top = 0.029
anchor_right = 0.979
anchor_bottom = 0.029
margin_left = -10.7576
margin_top = -3.08328
margin_right = 14.2423
margin_bottom = 21.9167
rect_scale = Vector2( 0.6, 0.6 )
mouse_filter = 1
texture_normal = ExtResource( 16 )
texture_pressed = ExtResource( 15 )
texture_hover = ExtResource( 16 )
expand = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Score" type="Label" parent="options"]
margin_left = 4.19974
margin_top = 3.7093
margin_right = 58.1997
margin_bottom = 22.7093
custom_fonts/font = SubResource( 64 )
text = "SCORE:"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Score Value" type="Label" parent="options"]
margin_left = 59.2004
margin_top = 3.2706
margin_right = 113.2
margin_bottom = 22.2706
custom_fonts/font = SubResource( 64 )
text = "0"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Control" type="Control" parent="options"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect" type="ColorRect" parent="options/Control"]
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
color = Color( 0, 0, 0, 0.835294 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="VBoxContainer" type="VBoxContainer" parent="options/Control"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -250.0
margin_top = -125.0
margin_right = 250.0
margin_bottom = 125.0
size_flags_horizontal = 4
size_flags_vertical = 4
custom_constants/separation = 36
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Title" type="Label" parent="options/Control/VBoxContainer"]
margin_right = 500.0
margin_bottom = 30.0
custom_fonts/font = SubResource( 66 )
custom_colors/font_color = Color( 1, 1, 1, 1 )
text = "OPTIONS"
align = 1
valign = 1

[node name="HBoxContainer" type="HBoxContainer" parent="options/Control/VBoxContainer"]
margin_top = 66.0
margin_right = 500.0
margin_bottom = 96.0
custom_constants/separation = 128

[node name="sound" type="Label" parent="options/Control/VBoxContainer/HBoxContainer"]
margin_right = 168.0
margin_bottom = 30.0
custom_fonts/font = SubResource( 66 )
custom_colors/font_color = Color( 1, 1, 1, 1 )
text = "SOUND VOLUME"
align = 1
valign = 1

[node name="slider" type="HSlider" parent="options/Control/VBoxContainer/HBoxContainer"]
margin_left = 296.0
margin_right = 496.0
margin_bottom = 16.0
rect_min_size = Vector2( 200, 0 )
min_value = -20.0
max_value = 0.0
allow_lesser = true
tick_count = 10
ticks_on_borders = true

[node name="HBoxContainer2" type="HBoxContainer" parent="options/Control/VBoxContainer"]
margin_top = 132.0
margin_right = 500.0
margin_bottom = 182.0
rect_min_size = Vector2( 500, 50 )
custom_constants/separation = 200
alignment = 1

[node name="Restart" type="Button" parent="options/Control/VBoxContainer/HBoxContainer2"]
margin_right = 150.0
margin_bottom = 50.0
rect_min_size = Vector2( 150, 50 )
focus_mode = 0
enabled_focus_mode = 0
text = "RESTART"

[node name="Quit" type="Button" parent="options/Control/VBoxContainer/HBoxContainer2"]
margin_left = 350.0
margin_right = 500.0
margin_bottom = 50.0
rect_min_size = Vector2( 150, 50 )
focus_mode = 0
enabled_focus_mode = 0
text = "QUIT"

[node name="close" type="Button" parent="options/Control"]
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -87.4561
margin_top = -42.8302
margin_right = -19.4561
margin_bottom = -19.8302
custom_fonts/font = SubResource( 68 )
text = "X CLOSE"
flat = true

[node name="Score2" type="Label" parent="options"]
margin_left = 101.405
margin_top = 3.1947
margin_right = 155.405
margin_bottom = 22.1947
custom_fonts/font = SubResource( 70 )
text = "of 620"
__meta__ = {
"_edit_use_anchors_": false
}

[connection signal="pressed" from="HUD/restart/VBoxContainer/restart" to="." method="_on_restart_pressed"]
[connection signal="pressed" from="HUD/restart/VBoxContainer/quit" to="." method="_on_quit_pressed"]
[connection signal="body_entered" from="exit" to="." method="_on_exit_body_entered"]
[connection signal="body_entered" from="hidden exit" to="." method="_on_hidden_exit_body_entered"]
[connection signal="body_entered" from="trap" to="." method="_on_trap_body_entered"]
[connection signal="body_entered" from="spikies" to="." method="_on_spikies_body_entered"]
[connection signal="body_entered" from="spikies/Area2D" to="." method="_on_Area2D_body_entered"]
[connection signal="body_entered" from="table/table 1" to="." method="_on_table_1_body_entered"]
[connection signal="body_entered" from="table2/table 2" to="." method="_on_table_2_body_entered"]
[connection signal="body_entered" from="table3/table 3" to="." method="_on_table_3_body_entered"]
[connection signal="body_entered" from="door" to="." method="_on_door_body_entered"]
[connection signal="body_entered" from="key" to="." method="_on_key_body_entered"]
[connection signal="pressed" from="options/Settings Button" to="options" method="_on_Settings_Button_pressed"]
[connection signal="value_changed" from="options/Control/VBoxContainer/HBoxContainer/slider" to="options" method="_on_slider_value_changed"]
[connection signal="pressed" from="options/Control/VBoxContainer/HBoxContainer2/Restart" to="options" method="_on_Restart_pressed"]
[connection signal="pressed" from="options/Control/VBoxContainer/HBoxContainer2/Quit" to="options" method="_on_Quit_pressed"]
[connection signal="pressed" from="options/Control/close" to="options" method="_on_close_pressed"]

[gd_scene load_steps=52 format=2]

[ext_resource path="res://scenes/levels/games/minigame/chunks/close_button.tres" type="StyleBox" id=1]
[ext_resource path="res://scenes/levels/games/minigame/new_tiles.tres" type="TileSet" id=2]
[ext_resource path="res://scenes/levels/options.gd" type="Script" id=3]
[ext_resource path="res://sprites/ui/mobile_joystick.png" type="Texture" id=4]
[ext_resource path="res://sprites/ui/mobile_thumbstick.png" type="Texture" id=5]
[ext_resource path="res://sprites/ui/border_bw.png" type="Texture" id=6]
[ext_resource path="res://sprites/minigame/computer_emtpy.png" type="Texture" id=7]
[ext_resource path="res://sprites/minigame/person.png" type="Texture" id=8]
[ext_resource path="res://sprites/minigame/door.png" type="Texture" id=9]
[ext_resource path="res://sprites/minigame/computer.png" type="Texture" id=10]
[ext_resource path="res://scenes/levels/games/minigame/joystick.gd" type="Script" id=11]
[ext_resource path="res://sprites/ui/settings_button.png" type="Texture" id=12]
[ext_resource path="res://sprites/ui/settings_button_pressed.png" type="Texture" id=13]
[ext_resource path="res://scenes/levels/games/minigame/chunks/illuminata_classroom.gd" type="Script" id=14]

[sub_resource type="CircleShape2D" id=27]
radius = 64.0

[sub_resource type="DynamicFontData" id=1]
antialiased = false
font_path = "res://fonts/HungryPro.ttf"

[sub_resource type="DynamicFont" id=2]
size = 40
font_data = SubResource( 1 )

[sub_resource type="DynamicFont" id=6]
size = 30
font_data = SubResource( 1 )

[sub_resource type="StyleBoxFlat" id=7]
bg_color = Color( 0.207843, 0.0901961, 0.239216, 1 )
border_width_left = 1
border_width_top = 1
border_width_right = 1
border_width_bottom = 1
border_color = Color( 1, 1, 1, 1 )
anti_aliasing = false

[sub_resource type="StyleBoxFlat" id=8]
bg_color = Color( 0.133333, 0, 0.172549, 1 )
border_width_left = 1
border_width_top = 1
border_width_right = 1
border_width_bottom = 1

[sub_resource type="StyleBoxFlat" id=3]
bg_color = Color( 0.780392, 0, 1, 1 )

[sub_resource type="DynamicFontData" id=4]
antialiased = false
font_path = "res://fonts/HungryPro.ttf"

[sub_resource type="DynamicFont" id=5]
size = 50
font_data = SubResource( 4 )

[sub_resource type="DynamicFontData" id=45]
font_path = "res://fonts/zpix.ttf"

[sub_resource type="DynamicFont" id=46]
size = 12
font_data = SubResource( 45 )

[sub_resource type="RectangleShape2D" id=47]
extents = Vector2( 4, 5 )

[sub_resource type="RectangleShape2D" id=49]
extents = Vector2( 5, 5 )

[sub_resource type="RectangleShape2D" id=64]
extents = Vector2( 6, 8 )

[sub_resource type="RectangleShape2D" id=65]
extents = Vector2( 35, 3 )

[sub_resource type="RectangleShape2D" id=66]
extents = Vector2( 5, 5 )

[sub_resource type="RectangleShape2D" id=67]
extents = Vector2( 4, 5 )

[sub_resource type="RectangleShape2D" id=68]
extents = Vector2( 4, 4 )

[sub_resource type="StyleBoxFlat" id=58]
content_margin_left = 10.0
content_margin_right = 10.0
content_margin_top = 10.0
content_margin_bottom = 10.0
draw_center = false
border_width_left = 2
border_width_top = 2
border_width_right = 2
border_width_bottom = 2
border_color = Color( 1, 1, 1, 1 )

[sub_resource type="DynamicFontData" id=69]
antialiased = false
font_path = "res://fonts/zpix.ttf"

[sub_resource type="DynamicFont" id=60]
size = 12
font_data = SubResource( 69 )

[sub_resource type="StyleBoxFlat" id=52]
bg_color = Color( 0, 0, 0, 1 )

[sub_resource type="StyleBoxFlat" id=55]
draw_center = false
border_width_left = 2
border_width_top = 2
border_width_right = 2
border_width_bottom = 2
border_color = Color( 1, 1, 1, 1 )
expand_margin_left = 7.0
expand_margin_right = 2.0

[sub_resource type="DynamicFontData" id=70]
antialiased = false
font_path = "res://fonts/zpix.ttf"

[sub_resource type="DynamicFont" id=54]
size = 12
extra_spacing_top = 3
extra_spacing_bottom = 4
font_data = SubResource( 70 )

[sub_resource type="DynamicFontData" id=71]
antialiased = false
font_path = "res://fonts/zpix.ttf"

[sub_resource type="DynamicFont" id=51]
size = 10
font_data = SubResource( 71 )

[sub_resource type="DynamicFontData" id=72]
antialiased = false
font_path = "res://fonts/zpix.ttf"

[sub_resource type="DynamicFont" id=57]
size = 12
font_data = SubResource( 72 )

[sub_resource type="DynamicFontData" id=73]
antialiased = false
font_path = "res://fonts/zpix.ttf"

[sub_resource type="DynamicFont" id=63]
size = 12
extra_spacing_bottom = 2
font_data = SubResource( 73 )

[sub_resource type="Shader" id=74]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/VHS-and-CRT-monitor-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

//*** IMPORTANT! ***/ 
// - If you are using this shader to affect the node it is applied to set 'overlay' to false (unchecked in the instepctor).
// - If you are using this shader as an overlay, and want the shader to affect the nodes below in the Scene hierarchy,
//   set 'overlay' to true (checked in the inspector).
// On Mac there is potentially a bug causing this to not work properly. If that is the case and you want to use the shader as an overlay
// change all \"overlay ? SCREEN_TEXTURE : TEXTURE\" to only \"SCREEN_TEXTURE\" on lines 129-140, and \"vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV);\"
// to \"vec2 uv = warp(SCREEN_UV);\" on line 98.
uniform bool overlay = false;

uniform float scanlines_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float scanlines_width : hint_range(0.0, 0.5) = 0.25;
uniform float grille_opacity : hint_range(0.0, 1.0) = 0.3;
uniform vec2 resolution = vec2(640.0, 480.0); // Set the number of rows and columns the texture will be divided in. Scanlines and grille will make a square based on these values

uniform bool pixelate = true; // Fill each square (\"pixel\") with a sampled color, creating a pixel look and a more accurate representation of how a CRT monitor would work.

uniform bool roll = true;
uniform float roll_speed = 8.0; // Positive values are down, negative are up
uniform float roll_size : hint_range(0.0, 100.0) = 15.0;
uniform float roll_variation : hint_range(0.1, 5.0) = 1.8; // This valie is not an exact science. You have to play around with the value to find a look you like. How this works is explained in the code below.
uniform float distort_intensity : hint_range(0.0, 0.2) = 0.05; // The distortion created by the rolling effect.

uniform float noise_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float noise_speed = 5.0; // There is a movement in the noise pattern that can be hard to see first. This sets the speed of that movement.

uniform float static_noise_intensity : hint_range(0.0, 1.0) = 0.06;

uniform float aberration : hint_range(-1.0, 1.0) = 0.03; // Chromatic aberration, a distortion on each color channel.
uniform float brightness = 1.4; // When adding scanline gaps and grille the image can get very dark. Brightness tries to compensate for that.
uniform bool discolor = true; // Add a discolor effect simulating a VHS

uniform float warp_amount :hint_range(0.0, 5.0) = 1.0; // Warp the texture edges simulating the curved glass of a CRT monitor or old TV.
uniform bool clip_warp = false;

uniform float vignette_intensity = 0.4; // Size of the vignette, how far towards the middle it should go.
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

// Generate a Perlin noise used by the distortion effects
float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	return uv + delta * delta_offset;
}

// Adds a black border to hide stretched pixel created by the warp effect
float border (vec2 uv){
	float radius = min(warp_amount, 0.08);
	radius = max(min(min(abs(radius * 2.0), abs(1.0)), abs(1.0)), 1e-5);
	vec2 abs_uv = abs(uv * 2.0 - 1.0) - vec2(1.0, 1.0) + radius;
	float dist = length(max(vec2(0.0), abs_uv)) / radius;
	float square = smoothstep(0.96, 1.0, dist);
	return clamp(1.0 - square, 0.0, 1.0);
}

// Adds a vignette shadow to the edges of the image
float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment()
{
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); // Warp the uv. uv will be used in most cases instead of UV to keep the warping
	vec2 text_uv = uv;
	vec2 roll_uv = vec2(0.0);
	float time = roll ? TIME : 0.0;
	

	// Pixelate the texture based on the given resolution.
	if (pixelate)
	{
		text_uv = ceil(uv * resolution) / resolution;
	}
	
	// Create the rolling effect. We need roll_line a bit later to make the noise effect.
	// That is why this runs if roll is true OR noise_opacity is over 0.
	float roll_line = 0.0;
	if (roll || noise_opacity > 0.0)
	{
		// Create the areas/lines where the texture will be distorted.
		roll_line = smoothstep(0.3, 0.9, sin(uv.y * roll_size - (time * roll_speed) ) );
		// Create more lines of a different size and apply to the first set of lines. This creates a bit of variation.
		roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * roll_size * roll_variation - (time * roll_speed * roll_variation) ) );
		// Distort the UV where where the lines are
		roll_uv = vec2(( roll_line * distort_intensity * (1.-UV.x)), 0.0);
	}
	
	vec4 text;
	if (roll)
	{
		// If roll is true distort the texture with roll_uv. The texture is split up into RGB to 
		// make some chromatic aberration. We apply the aberration to the red and green channels accorging to the aberration parameter
		// and intensify it a bit in the roll distortion.
		text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(aberration, 0.0) * .1 ).g;
		text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
		text.a = 1.0;
	}
	else
	{
		// If roll is false only apply the aberration without any distorion. The aberration values are very small so the .1 is only 
		// to make the slider in the Inspector less sensitive.
		text.r = texture(SCREEN_TEXTURE, text_uv + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv - vec2(aberration, 0.0) * .1).g;
		text.b = texture(SCREEN_TEXTURE, text_uv).b;
		text.a = 1.0;
	}
	
	float r = text.r;
	float g = text.g;
	float b = text.b;
	
	uv = warp(UV);
	
	// CRT monitors don't have pixels but groups of red, green and blue dots or lines, called grille. We isolate the texture's color channels 
	// and divide it up in 3 offsetted lines to show the red, green and blue colors next to each other, with a small black gap between.
	if (grille_opacity > 0.0){
		
		float g_r = smoothstep(0.85, 0.95, abs(sin(uv.x * (resolution.x * 3.14159265))));
		r = mix(r, r * g_r, grille_opacity);
		
		float g_g = smoothstep(0.85, 0.95, abs(sin(1.05 + uv.x * (resolution.x * 3.14159265))));
		g = mix(g, g * g_g, grille_opacity);
		
		float b_b = smoothstep(0.85, 0.95, abs(sin(2.1 + uv.x * (resolution.x * 3.14159265))));
		b = mix(b, b * b_b, grille_opacity);
		
	}
	
	// Apply the grille to the texture's color channels and apply Brightness. Since the grille and the scanlines (below) make the image very dark you
	// can compensate by increasing the brightness.
	text.r = clamp(r * brightness, 0.0, 1.0);
	text.g = clamp(g * brightness, 0.0, 1.0);
	text.b = clamp(b * brightness, 0.0, 1.0);
	
	// Scanlines are the horizontal lines that make up the image on a CRT monitor. 
	// Here we are actual setting the black gap between each line, which I guess is not the right definition of the word, but you get the idea  
	float scanlines = 0.5;
	if (scanlines_opacity > 0.0)
	{
		// Same technique as above, create lines with sine and applying it to the texture. Smoothstep to allow setting the line size.
		scanlines = smoothstep(scanlines_width, scanlines_width + 0.5, abs(sin(uv.y * (resolution.y * 3.14159265))));
		text.rgb = mix(text.rgb, text.rgb * vec3(scanlines), scanlines_opacity);
	}
	
	// Apply the banded noise.
	if (noise_opacity > 0.0)
	{
		// Generate a noise pattern that is very stretched horizontally, and animate it with noise_speed
		float noise = smoothstep(0.4, 0.5, noise(uv * vec2(2.0, 200.0) + vec2(10.0, (TIME * (noise_speed))) ) );
		
		// We use roll_line (set above) to define how big the noise should be vertically (multiplying cuts off all black parts).
		// We also add in some basic noise with random() to break up the noise pattern above. The noise is sized according to 
		// the resolution value set in the inspector. If you don't like this look you can 
		// change \"ceil(uv * resolution) / resolution\" to only \"uv\" to make it less pixelated. Or multiply resolution with som value
		// greater than 1.0 to make them smaller.
		roll_line *= noise * scanlines * clamp(random((ceil(uv * resolution) / resolution) + vec2(TIME * 0.8, 0.0)).x + 0.8, 0.0, 1.0);
		// Add it to the texture based on noise_opacity
		text.rgb = clamp(mix(text.rgb, text.rgb + roll_line, noise_opacity), vec3(0.0), vec3(1.0));
	}
	
	// Apply static noise by generating it over the whole screen in the same way as above
	if (static_noise_intensity > 0.0)
	{
		text.rgb += clamp(random((ceil(uv * resolution) / resolution) + fract(TIME)).x, 0.0, 1.0) * static_noise_intensity;
	}
	
	// Apply a black border to hide imperfections caused by the warping.
	// Also apply the vignette
	text.rgb *= border(uv);
	text.rgb *= vignette(uv);
	// Hides the black border and make that area transparent. Good if you want to add the the texture on top an image of a TV or monitor.
	if (clip_warp)
	{
		text.a = border(uv);
	}
	
	// Apply discoloration to get a VHS look (lower saturation and higher contrast)
	// You can play with the values below or expose them in the Inspector.
	float saturation = 0.5;
	float contrast = 1.2;
	if (discolor)
	{
		// Saturation
		vec3 greyscale = vec3(text.r + text.g + text.b) / 3.;
		text.rgb = mix(text.rgb, greyscale, saturation);
		
		// Contrast
		float midpoint = pow(0.5, 2.2);
		text.rgb = (text.rgb - vec3(midpoint)) * contrast + midpoint;
	}
	
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id=75]
shader = SubResource( 74 )
shader_param/overlay = true
shader_param/scanlines_opacity = 0.0
shader_param/scanlines_width = 0.2
shader_param/grille_opacity = 0.126
shader_param/resolution = Vector2( 640, 480 )
shader_param/pixelate = false
shader_param/roll = false
shader_param/roll_speed = 2.0
shader_param/roll_size = 15.0
shader_param/roll_variation = 1.8
shader_param/distort_intensity = 0.028
shader_param/noise_opacity = 0.1
shader_param/noise_speed = 1.0
shader_param/static_noise_intensity = 0.06
shader_param/aberration = -0.005
shader_param/brightness = 1.4
shader_param/discolor = true
shader_param/warp_amount = 0.391
shader_param/clip_warp = false
shader_param/vignette_intensity = 0.4
shader_param/vignette_opacity = 0.5

[sub_resource type="DynamicFontData" id=33]
antialiased = false
font_path = "res://fonts/HungryPro.ttf"

[sub_resource type="DynamicFont" id=76]
size = 32
font_data = SubResource( 33 )

[sub_resource type="DynamicFontData" id=34]
antialiased = false
font_path = "res://fonts/HungryPro.ttf"

[sub_resource type="DynamicFont" id=77]
size = 18
font_data = SubResource( 34 )

[node name="illuminata_classroom" type="Node2D"]
script = ExtResource( 14 )

[node name="joystick" type="CanvasLayer" parent="."]
script = ExtResource( 11 )

[node name="TouchScreenButton" type="TouchScreenButton" parent="joystick"]
visible = false
modulate = Color( 1, 1, 1, 0.145098 )
normal = ExtResource( 4 )
shape = SubResource( 27 )
visibility_mode = 1

[node name="touch sprite" type="Sprite" parent="joystick"]
visible = false
position = Vector2( 32, 32 )
texture = ExtResource( 5 )

[node name="HUD" type="CanvasLayer" parent="."]

[node name="restart" type="Control" parent="HUD"]
pause_mode = 2
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect" type="ColorRect" parent="HUD/restart"]
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0.121569, 0.0980392, 0.0980392, 0.564706 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="VBoxContainer" type="VBoxContainer" parent="HUD/restart"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -286.0
margin_top = -94.0
margin_right = 286.0
margin_bottom = 94.0
custom_constants/separation = 10
__meta__ = {
"_edit_use_anchors_": false
}

[node name="title" type="Label" parent="HUD/restart/VBoxContainer"]
margin_right = 572.0
margin_bottom = 47.0
custom_fonts/font = SubResource( 2 )
text = "SORRY, YOU DIDN'T SUCCEED."
align = 1
valign = 1
autowrap = true

[node name="subtitle" type="Label" parent="HUD/restart/VBoxContainer"]
margin_top = 57.0
margin_right = 572.0
margin_bottom = 76.0
custom_fonts/font = SubResource( 6 )
custom_colors/font_color = Color( 0, 1, 0.823529, 1 )
text = "try again, joe is counting on you!"
align = 1
autowrap = true
uppercase = true

[node name="restart" type="Button" parent="HUD/restart/VBoxContainer"]
margin_top = 86.0
margin_right = 572.0
margin_bottom = 133.0
focus_mode = 0
mouse_filter = 1
custom_styles/hover = SubResource( 7 )
custom_styles/pressed = SubResource( 8 )
custom_styles/normal = SubResource( 3 )
custom_fonts/font = SubResource( 5 )
enabled_focus_mode = 0
text = "TRY AGAIN!"

[node name="quit" type="Button" parent="HUD/restart/VBoxContainer"]
margin_top = 143.0
margin_right = 572.0
margin_bottom = 196.0
focus_mode = 0
mouse_filter = 1
custom_fonts/font = SubResource( 5 )
enabled_focus_mode = 0
text = "QUIT GAME"
flat = true

[node name="question" type="Node2D" parent="."]
position = Vector2( -55, -169 )
z_index = 1

[node name="border" type="NinePatchRect" parent="question"]
margin_right = 82.0
margin_bottom = 36.0
rect_scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 6 )
patch_margin_left = 20
patch_margin_top = 18
patch_margin_right = 18
patch_margin_bottom = 18
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question text" type="Label" parent="question/border"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -33.0
margin_top = -7.0
margin_right = 99.0
margin_bottom = 20.0
rect_scale = Vector2( 0.5, 0.5 )
size_flags_horizontal = 4
custom_fonts/font = SubResource( 46 )
text = "test day!"
align = 1
valign = 1
autowrap = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question2" type="Node2D" parent="."]
position = Vector2( 4, -169 )
z_index = 1

[node name="border" type="NinePatchRect" parent="question2"]
margin_right = 82.0
margin_bottom = 36.0
rect_scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 6 )
patch_margin_left = 20
patch_margin_top = 18
patch_margin_right = 18
patch_margin_bottom = 18
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question text" type="Label" parent="question2/border"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -33.0
margin_top = -7.0
margin_right = 99.0
margin_bottom = 20.0
rect_scale = Vector2( 0.5, 0.5 )
size_flags_horizontal = 4
custom_fonts/font = SubResource( 46 )
text = "no outside materials allowed"
align = 1
valign = 1
autowrap = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question3" type="Node2D" parent="."]
position = Vector2( 25, -96.875 )
scale = Vector2( 0.75, 0.75 )
z_index = 1

[node name="border" type="NinePatchRect" parent="question3"]
margin_right = 82.0
margin_bottom = 36.0
rect_scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 6 )
patch_margin_left = 20
patch_margin_top = 18
patch_margin_right = 18
patch_margin_bottom = 18
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question text" type="Label" parent="question3/border"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -33.0
margin_top = -7.0
margin_right = 99.0
margin_bottom = 20.0
rect_scale = Vector2( 0.5, 0.5 )
size_flags_horizontal = 4
custom_fonts/font = SubResource( 46 )
text = "offices"
align = 1
valign = 1
autowrap = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question5" type="Node2D" parent="."]
position = Vector2( -55, -97 )
scale = Vector2( 0.75, 0.75 )
z_index = 1

[node name="border" type="NinePatchRect" parent="question5"]
margin_right = 82.0
margin_bottom = 36.0
rect_scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 6 )
patch_margin_left = 20
patch_margin_top = 18
patch_margin_right = 18
patch_margin_bottom = 18
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question text" type="Label" parent="question5/border"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -33.0
margin_top = -7.0
margin_right = 99.0
margin_bottom = 20.0
rect_scale = Vector2( 0.5, 0.5 )
size_flags_horizontal = 4
custom_fonts/font = SubResource( 46 )
text = "library"
align = 1
valign = 1
autowrap = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question6" type="Node2D" parent="."]
position = Vector2( -201, -137 )
scale = Vector2( 0.75, 0.75 )
z_index = 1

[node name="border" type="NinePatchRect" parent="question6"]
margin_right = 82.0
margin_bottom = 36.0
rect_scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 6 )
patch_margin_left = 20
patch_margin_top = 18
patch_margin_right = 18
patch_margin_bottom = 18
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question text" type="Label" parent="question6/border"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -33.0
margin_top = -7.0
margin_right = 99.0
margin_bottom = 20.0
rect_scale = Vector2( 0.5, 0.5 )
size_flags_horizontal = 4
custom_fonts/font = SubResource( 46 )
text = "please do not take books"
align = 1
valign = 1
autowrap = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question4" type="Node2D" parent="."]
position = Vector2( 220, -127 )
scale = Vector2( 0.75, 0.75 )
z_index = 1

[node name="border" type="NinePatchRect" parent="question4"]
margin_right = 82.0
margin_bottom = 36.0
rect_scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 6 )
patch_margin_left = 20
patch_margin_top = 18
patch_margin_right = 18
patch_margin_bottom = 18
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question text" type="Label" parent="question4/border"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -33.0
margin_top = -7.0
margin_right = 99.0
margin_bottom = 20.0
rect_scale = Vector2( 0.5, 0.5 )
size_flags_horizontal = 4
custom_fonts/font = SubResource( 46 )
text = "dr. chuck ESQ, MD, MBA, LMSW"
align = 1
valign = 1
autowrap = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="sort" type="YSort" parent="."]

[node name="spawner" type="Position2D" parent="sort"]
position = Vector2( 0, -44 )

[node name="wall tiles" type="TileMap" parent="sort"]
position = Vector2( 7.62939e-06, 0 )
tile_set = ExtResource( 2 )
cell_size = Vector2( 10, 10 )
show_collision = true
format = 1
tile_data = PoolIntArray( -1966086, 49, 0, -1966085, 49, 0, -1966084, 49, 0, -1966083, 49, 0, -1966082, 49, 0, -1966081, 49, 0, -2031616, 49, 0, -2031615, 49, 0, -2031614, 49, 0, -2031613, 49, 0, -2031612, 49, 0, -2031611, 49, 0, -1900550, 49, 0, -1900549, 49, 0, -1900548, 159, 0, -1900547, 159, 0, -1900546, 159, 0, -1900545, 159, 0, -1966080, 159, 0, -1966079, 159, 0, -1966078, 159, 0, -1966077, 159, 0, -1966076, 49, 0, -1966075, 49, 0, -1835014, 49, 0, -1835013, 49, 0, -1900540, 49, 0, -1900539, 49, 0, -1769478, 49, 0, -1769477, 49, 0, -1769474, 149, 0, -1835007, 169, 0, -1835004, 49, 0, -1835003, 49, 0, -1703942, 49, 0, -1703941, 49, 0, -1769468, 49, 0, -1769467, 49, 0, -1638406, 49, 0, -1638405, 49, 0, -1703932, 49, 0, -1703931, 49, 0, -1572870, 49, 0, -1572869, 49, 0, -1638396, 49, 0, -1638395, 49, 0, -1507334, 47, 0, -1507333, 47, 0, -1572860, 47, 0, -1572859, 47, 0, -1441798, 47, 0, -1441797, 47, 0, -1441796, 162, 0, -1441794, 162, 0, -1507327, 162, 0, -1507325, 162, 0, -1507324, 47, 0, -1507323, 47, 0, -1376262, 47, 0, -1376261, 47, 0, -1441788, 47, 0, -1441787, 47, 0, -1310726, 47, 0, -1310725, 47, 0, -1376252, 47, 0, -1376251, 47, 0, -1245190, 47, 0, -1245189, 47, 0, -1310716, 47, 0, -1310715, 47, 0, -1179654, 47, 0, -1179653, 47, 0, -1245180, 47, 0, -1245179, 47, 0, -1114118, 47, 0, -1114117, 47, 0, -1179644, 47, 0, -1179643, 47, 0, -1048582, 47, 0, -1048581, 47, 0, -1048580, 47, 0, -1048579, 47, 0, -1048578, 47, 0, -1114112, 49, 0, -1114111, 49, 0, -1114110, 47, 0, -1114109, 47, 0, -1114108, 47, 0, -1114107, 47, 0, -983046, 47, 0, -983045, 47, 0, -983044, 47, 0, -983043, 47, 0, -983042, 47, 0, -1048576, 49, 0, -1048575, 49, 0, -1048574, 49, 0, -1048573, 47, 0, -1048572, 49, 0, -1048571, 47, 0, -917510, 49, 0, -917509, 49, 0, -917508, 49, 0, -917507, 47, 0, -983038, 49, 0, -983037, 49, 0, -983036, 49, 0, -983035, 49, 0, -851992, 47, 0, -851991, 47, 0, -851990, 47, 0, -851989, 47, 0, -851988, 47, 0, -851987, 47, 0, -851986, 47, 0, -851985, 47, 0, -851984, 47, 0, -851983, 47, 0, -851982, 47, 0, -851974, 49, 0, -851973, 49, 0, -851972, 49, 0, -851971, 47, 0, -917502, 49, 0, -917501, 49, 0, -917500, 49, 0, -917499, 49, 0, -786456, 49, 0, -786455, 49, 0, -786454, 49, 0, -786453, 49, 0, -786452, 49, 0, -786451, 49, 0, -786450, 49, 0, -786449, 49, 0, -786448, 49, 0, -786447, 49, 0, -786446, 49, 0, -786438, 49, 0, -786437, 49, 0, -786436, 49, 0, -786435, 49, 0, -851966, 49, 0, -851965, 49, 0, -851964, 49, 0, -851963, 49, 0, -851948, 47, 0, -851947, 47, 0, -851946, 47, 0, -851945, 47, 0, -851944, 47, 0, -851943, 47, 0, -851942, 47, 0, -720920, 49, 0, -720919, 49, 0, -720911, 49, 0, -720910, 49, 0, -720902, 49, 0, -720901, 49, 0, -720900, 49, 0, -720899, 47, 0, -786430, 49, 0, -786429, 49, 0, -786428, 49, 0, -786427, 49, 0, -786412, 49, 0, -786411, 49, 0, -786410, 49, 0, -786409, 49, 0, -786408, 49, 0, -786407, 49, 0, -786406, 49, 0, -655384, 49, 0, -655374, 49, 0, -655366, 49, 0, -655365, 49, 0, -655364, 49, 0, -655363, 47, 0, -720894, 47, 0, -720893, 49, 0, -720892, 49, 0, -720891, 49, 0, -720876, 47, 0, -720870, 49, 0, -589848, 49, 0, -589838, 49, 0, -589830, 49, 0, -589829, 49, 0, -589828, 49, 0, -589827, 47, 0, -655358, 47, 0, -655357, 49, 0, -655356, 49, 0, -655355, 49, 0, -655340, 47, 0, -655334, 47, 0, -524312, 49, 0, -524302, 49, 0, -524301, 49, 0, -524300, 49, 0, -524299, 49, 0, -524298, 49, 0, -524297, 49, 0, -524296, 49, 0, -524295, 49, 0, -524294, 49, 0, -524293, 49, 0, -524292, 49, 0, -524291, 49, 0, -589822, 49, 0, -589821, 49, 0, -589820, 49, 0, -589819, 49, 0, -589818, 47, 0, -589817, 47, 0, -589816, 47, 0, -589815, 47, 0, -589813, 47, 0, -589812, 47, 0, -589811, 47, 0, -589810, 47, 0, -589809, 47, 0, -589807, 47, 0, -589806, 47, 0, -589805, 47, 0, -589804, 47, 0, -589798, 47, 0, -458776, 49, 0, -524262, 47, 0, -393240, 49, 0, -393230, 49, 0, -393229, 49, 0, -393228, 49, 0, -393227, 49, 0, -393226, 49, 0, -393225, 49, 0, -393224, 49, 0, -393223, 49, 0, -393222, 49, 0, -393221, 49, 0, -393220, 49, 0, -393219, 47, 0, -458750, 47, 0, -458749, 49, 0, -458748, 49, 0, -458747, 49, 0, -458746, 47, 0, -458745, 47, 0, -458744, 47, 0, -458743, 47, 0, -458742, 47, 0, -458741, 47, 0, -458740, 47, 0, -458738, 47, 0, -458737, 47, 0, -458736, 47, 0, -458735, 47, 0, -458734, 47, 0, -458733, 47, 0, -458732, 47, 0, -458726, 47, 0, -327704, 49, 0, -327694, 49, 0, -327686, 49, 0, -327685, 49, 0, -327684, 49, 0, -327683, 47, 0, -393214, 47, 0, -393213, 49, 0, -393212, 49, 0, -393211, 49, 0, -393196, 47, 0, -393195, 47, 0, -393194, 47, 0, -393193, 47, 0, -393192, 47, 0, -393191, 47, 0, -393190, 47, 0, -262168, 49, 0, -262158, 49, 0, -262150, 49, 0, -262149, 49, 0, -262148, 49, 0, -262147, 47, 0, -327678, 47, 0, -327677, 49, 0, -327676, 49, 0, -327675, 49, 0, -196632, 49, 0, -196631, 49, 0, -196630, 49, 0, -196629, 49, 0, -196628, 49, 0, -196627, 49, 0, -196626, 49, 0, -196625, 49, 0, -196624, 49, 0, -196623, 49, 0, -196622, 49, 0, -196614, 49, 0, -196613, 49, 0, -196612, 49, 0, -196611, 47, 0, -262142, 47, 0, -262141, 49, 0, -262140, 49, 0, -262139, 49, 0, -131078, 49, 0, -131077, 49, 0, -131076, 49, 0, -131075, 47, 0, -131074, 149, 0, -196607, 161, 0, -196606, 47, 0, -196605, 49, 0, -196604, 49, 0, -196603, 49, 0, -65542, 49, 0, -65541, 49, 0, -65540, 49, 0, -65539, 47, 0, -65538, 152, 0, -65537, 152, 0, -131072, 151, 0, -131071, 152, 0, -131070, 47, 0, -131069, 49, 0, -131068, 49, 0, -131067, 49, 0 )

[node name="props" type="TileMap" parent="sort"]
position = Vector2( 7.62939e-06, 0 )
tile_set = ExtResource( 2 )
cell_size = Vector2( 10, 10 )
show_collision = true
format = 1
tile_data = PoolIntArray( -1769475, 167, 0, -1572868, 155, 0, -1572866, 155, 0, -1638399, 155, 0, -1638397, 155, 0, -1310724, 162, 0, -1310722, 162, 0, -1376255, 162, 0, -1376253, 162, 0, -1114116, 116, 0, -1114115, 161, 0, -1179648, 149, 0, -1179645, 117, 0, -720918, 150, 0, -720917, 152, 0, -720916, 151, 0, -720915, 152, 0, -720914, 151, 0, -720913, 152, 0, -720912, 151, 0, -589846, 153, 0, -589844, 153, 0, -589842, 153, 0, -655338, 149, 0, -458731, 158, 0, -458730, 163, 0, -458728, 157, 0, -458727, 160, 0, -327702, 155, 0, -327700, 155, 0, -327698, 155, 0 )

[node name="doors" type="TileMap" parent="sort"]
tile_set = ExtResource( 2 )
cell_size = Vector2( 10, 10 )
show_collision = true
format = 1
tile_data = PoolIntArray( -589814, 115, 0, -589808, 115, 0, -458739, 115, 0 )

[node name="students" type="YSort" parent="sort"]

[node name="Sprite13" type="Sprite" parent="sort/students"]
position = Vector2( -35, -236 )
z_index = 1
texture = ExtResource( 8 )
offset = Vector2( 0, -3 )

[node name="Sprite14" type="Sprite" parent="sort/students"]
position = Vector2( 15, -236 )
z_index = 1
texture = ExtResource( 8 )
offset = Vector2( 0, -3 )

[node name="Sprite15" type="Sprite" parent="sort/students"]
position = Vector2( 35, -237 )
z_index = 1
texture = ExtResource( 8 )
offset = Vector2( 0, -3 )

[node name="Sprite5" type="Sprite" parent="sort/students"]
position = Vector2( -35, -199 )
z_index = 1
texture = ExtResource( 8 )
offset = Vector2( 0, -3 )

[node name="Sprite6" type="Sprite" parent="sort/students"]
position = Vector2( -15, -199 )
z_index = 1
texture = ExtResource( 8 )
offset = Vector2( 0, -3 )

[node name="Sprite7" type="Sprite" parent="sort/students"]
position = Vector2( 15, -199 )
z_index = 1
texture = ExtResource( 8 )
offset = Vector2( 0, -3 )

[node name="Sprite8" type="Sprite" parent="sort/students"]
position = Vector2( 35, -199 )
z_index = 1
texture = ExtResource( 8 )
offset = Vector2( 0, -3 )

[node name="Sprite9" type="Sprite" parent="sort/students"]
position = Vector2( -35, -218 )
z_index = 1
texture = ExtResource( 8 )
offset = Vector2( 0, -3 )

[node name="Sprite10" type="Sprite" parent="sort/students"]
position = Vector2( -15, -218 )
z_index = 1
texture = ExtResource( 8 )
offset = Vector2( 0, -3 )

[node name="Sprite11" type="Sprite" parent="sort/students"]
position = Vector2( 15, -218 )
z_index = 1
texture = ExtResource( 8 )
offset = Vector2( 0, -3 )

[node name="Sprite12" type="Sprite" parent="sort/students"]
position = Vector2( 35, -218 )
z_index = 1
texture = ExtResource( 8 )
offset = Vector2( 0, -3 )

[node name="exit" type="Area2D" parent="sort"]
position = Vector2( 0, 22 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="sort/exit"]
position = Vector2( 125, -385 )
shape = SubResource( 47 )

[node name="computer" type="Area2D" parent="sort"]
position = Vector2( 234, -102 )
z_index = 1

[node name="CollisionShape2D" type="CollisionShape2D" parent="sort/computer"]
shape = SubResource( 49 )

[node name="Sprite" type="Sprite" parent="sort/computer"]
texture = ExtResource( 10 )

[node name="cabinet" type="Area2D" parent="sort"]
position = Vector2( 254, -65 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="sort/cabinet"]
position = Vector2( 1, 1 )
shape = SubResource( 64 )

[node name="books" type="Area2D" parent="sort"]
position = Vector2( -185, -110 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="sort/books"]
shape = SubResource( 65 )

[node name="seat" type="Area2D" parent="sort"]
position = Vector2( -15, -242 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="sort/seat"]
position = Vector2( 0, -2 )
shape = SubResource( 66 )

[node name="door" type="Area2D" parent="sort"]
position = Vector2( -5, -155 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="sort/door"]
shape = SubResource( 67 )

[node name="StaticBody2D" type="StaticBody2D" parent="sort/door"]

[node name="CollisionShape2D" type="CollisionShape2D" parent="sort/door/StaticBody2D"]
shape = SubResource( 68 )

[node name="Sprite" type="Sprite" parent="sort/door/StaticBody2D/CollisionShape2D"]
texture = ExtResource( 9 )

[node name="computer input" type="CanvasLayer" parent="."]
pause_mode = 2

[node name="TextureRect" type="TextureRect" parent="computer input"]
visible = false
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -223.0
margin_top = -159.0
margin_bottom = -2.0
rect_scale = Vector2( 2, 2 )
texture = ExtResource( 7 )
expand = true
stretch_mode = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="question" type="RichTextLabel" parent="computer input/TextureRect"]
visible = false
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -47.5
margin_top = -55.5
margin_right = 175.5
margin_bottom = 101.5
rect_scale = Vector2( 0.5, 0.5 )
custom_styles/normal = SubResource( 58 )
custom_fonts/normal_font = SubResource( 60 )
bbcode_enabled = true
bbcode_text = "Professor Chuck
Code of Magic
Final Exam Fall 3040

Question 1:
How can you drop two eggs the fewest amount of times, without them breaking?

Answer: C"
text = "Professor Chuck
Code of Magic
Final Exam Fall 3040

Question 1:
How can you drop two eggs the fewest amount of times, without them breaking?

Answer: C"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Panel" type="Panel" parent="computer input/TextureRect"]
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
margin_left = -63.5
margin_top = -68.0
margin_right = 84.5
margin_bottom = -21.0
mouse_filter = 1
custom_styles/panel = SubResource( 52 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="password" type="Label" parent="computer input/TextureRect/Panel"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -66.0
margin_top = -63.5
margin_right = 71.0
margin_bottom = -40.5
custom_styles/normal = SubResource( 55 )
custom_fonts/font = SubResource( 54 )
custom_colors/font_color = Color( 1, 1, 1, 1 )
text = "..."
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="prompt" type="Label" parent="computer input/TextureRect/Panel"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -71.0
margin_top = -88.5
margin_right = 74.0
margin_bottom = -69.5
custom_fonts/font = SubResource( 54 )
custom_colors/font_color = Color( 1, 1, 1, 1 )
text = "please enter password:"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="GridContainer" type="GridContainer" parent="computer input/TextureRect/Panel"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -61.5
margin_top = -32.0
margin_right = 60.5
margin_bottom = 12.0
columns = 9
__meta__ = {
"_edit_use_anchors_": false
}

[node name="A" type="Label" parent="computer input/TextureRect/Panel/GridContainer"]
margin_right = 10.0
margin_bottom = 11.0
rect_min_size = Vector2( 10, 10 )
mouse_filter = 0
custom_fonts/font = SubResource( 51 )
text = "A"
align = 1
valign = 1

[node name="B" type="Label" parent="computer input/TextureRect/Panel/GridContainer"]
margin_left = 14.0
margin_right = 24.0
margin_bottom = 11.0
rect_min_size = Vector2( 10, 10 )
mouse_filter = 0
custom_fonts/font = SubResource( 51 )
text = "B"
align = 1
valign = 1

[node name="C" type="Label" parent="computer input/TextureRect/Panel/GridContainer"]
margin_left = 28.0
margin_right = 38.0
margin_bottom = 11.0
rect_min_size = Vector2( 10, 10 )
mouse_filter = 0
custom_fonts/font = SubResource( 51 )
text = "C"
align = 1
valign = 1

[node name="D" type="Label" parent="computer input/TextureRect/Panel/GridContainer"]
margin_left = 42.0
margin_right = 52.0
margin_bottom = 11.0
rect_min_size = Vector2( 10, 10 )
mouse_filter = 0
custom_fonts/font = SubResource( 51 )
text = "D"
align = 1
valign = 1

[node name="E" type="Label" parent="computer input/TextureRect/Panel/GridContainer"]
margin_left = 56.0
margin_right = 66.0
margin_bottom = 11.0
rect_min_size = Vector2( 10, 10 )
mouse_filter = 0
custom_fonts/font = SubResource( 51 )
text = "E"
align = 1
valign = 1

[node name="F" type="Label" parent="computer input/TextureRect/Panel/GridContainer"]
margin_left = 70.0
margin_right = 80.0
margin_bottom = 11.0
rect_min_size = Vector2( 10, 10 )
mouse_filter = 0
custom_fonts/font = SubResource( 51 )
text = "F"
align = 1
valign = 1

[node name="G" type="Label" parent="computer input/TextureRect/Panel/GridContainer"]
margin_left = 84.0
margin_right = 94.0
margin_bottom = 11.0
rect_min_size = Vector2( 10, 10 )
mouse_filter = 0
custom_fonts/font = SubResource( 51 )
text = "G"
align = 1
valign = 1

[node name="H" type="Label" parent="computer input/TextureRect/Panel/GridContainer"]
margin_left = 98.0
margin_right = 108.0
margin_bottom = 11.0
rect_min_size = Vector2( 10, 10 )
mouse_filter = 0
custom_fonts/font = SubResource( 51 )
text = "H"
align = 1
valign = 1

[node name="I" type="Label" parent="computer input/TextureRect/Panel/GridContainer"]
margin_left = 112.0
margin_right = 122.0
margin_bottom = 11.0
rect_min_size = Vector2( 10, 10 )
mouse_filter = 0
custom_fonts/font = SubResource( 51 )
text = "I"
align = 1
valign = 1

[node name="J" type="Label" parent="computer input/TextureRect/Panel/GridContainer"]
margin_top = 15.0
margin_right = 10.0
margin_bottom = 26.0
rect_min_size = Vector2( 10, 10 )
mouse_filter = 0
custom_fonts/font = SubResource( 51 )
text = "J"
align = 1
valign = 1

[node name="K" type="Label" parent="computer input/TextureRect/Panel/GridContainer"]
margin_left = 14.0
margin_top = 15.0
margin_right = 24.0
margin_bottom = 26.0
rect_min_size = Vector2( 10, 10 )
mouse_filter = 0
custom_fonts/font = SubResource( 51 )
text = "K"
align = 1
valign = 1

[node name="L" type="Label" parent="computer input/TextureRect/Panel/GridContainer"]
margin_left = 28.0
margin_top = 15.0
margin_right = 38.0
margin_bottom = 26.0
rect_min_size = Vector2( 10, 10 )
mouse_filter = 0
custom_fonts/font = SubResource( 51 )
text = "L"
align = 1
valign = 1

[node name="M" type="Label" parent="computer input/TextureRect/Panel/GridContainer"]
margin_left = 42.0
margin_top = 15.0
margin_right = 52.0
margin_bottom = 26.0
rect_min_size = Vector2( 10, 10 )
mouse_filter = 0
custom_fonts/font = SubResource( 51 )
text = "M"
align = 1
valign = 1

[node name="N" type="Label" parent="computer input/TextureRect/Panel/GridContainer"]
margin_left = 56.0
margin_top = 15.0
margin_right = 66.0
margin_bottom = 26.0
rect_min_size = Vector2( 10, 10 )
mouse_filter = 0
custom_fonts/font = SubResource( 51 )
text = "N"
align = 1
valign = 1

[node name="O" type="Label" parent="computer input/TextureRect/Panel/GridContainer"]
margin_left = 70.0
margin_top = 15.0
margin_right = 80.0
margin_bottom = 26.0
rect_min_size = Vector2( 10, 10 )
mouse_filter = 0
custom_fonts/font = SubResource( 51 )
text = "O"
align = 1
valign = 1

[node name="P" type="Label" parent="computer input/TextureRect/Panel/GridContainer"]
margin_left = 84.0
margin_top = 15.0
margin_right = 94.0
margin_bottom = 26.0
rect_min_size = Vector2( 10, 10 )
mouse_filter = 0
custom_fonts/font = SubResource( 51 )
text = "P"
align = 1
valign = 1

[node name="Q" type="Label" parent="computer input/TextureRect/Panel/GridContainer"]
margin_left = 98.0
margin_top = 15.0
margin_right = 108.0
margin_bottom = 26.0
rect_min_size = Vector2( 10, 10 )
mouse_filter = 0
custom_fonts/font = SubResource( 51 )
text = "Q"
align = 1
valign = 1

[node name="R" type="Label" parent="computer input/TextureRect/Panel/GridContainer"]
margin_left = 112.0
margin_top = 15.0
margin_right = 122.0
margin_bottom = 26.0
rect_min_size = Vector2( 10, 10 )
mouse_filter = 0
custom_fonts/font = SubResource( 51 )
text = "R"
align = 1
valign = 1

[node name="S" type="Label" parent="computer input/TextureRect/Panel/GridContainer"]
margin_top = 30.0
margin_right = 10.0
margin_bottom = 41.0
rect_min_size = Vector2( 10, 10 )
mouse_filter = 0
custom_fonts/font = SubResource( 51 )
text = "S"
align = 1
valign = 1

[node name="T" type="Label" parent="computer input/TextureRect/Panel/GridContainer"]
margin_left = 14.0
margin_top = 30.0
margin_right = 24.0
margin_bottom = 41.0
rect_min_size = Vector2( 10, 10 )
mouse_filter = 0
custom_fonts/font = SubResource( 51 )
text = "T"
align = 1
valign = 1

[node name="U" type="Label" parent="computer input/TextureRect/Panel/GridContainer"]
margin_left = 28.0
margin_top = 30.0
margin_right = 38.0
margin_bottom = 41.0
rect_min_size = Vector2( 10, 10 )
mouse_filter = 0
custom_fonts/font = SubResource( 51 )
text = "U"
align = 1
valign = 1

[node name="V" type="Label" parent="computer input/TextureRect/Panel/GridContainer"]
margin_left = 42.0
margin_top = 30.0
margin_right = 52.0
margin_bottom = 41.0
rect_min_size = Vector2( 10, 10 )
mouse_filter = 0
custom_fonts/font = SubResource( 51 )
text = "V"
align = 1
valign = 1

[node name="W" type="Label" parent="computer input/TextureRect/Panel/GridContainer"]
margin_left = 56.0
margin_top = 30.0
margin_right = 66.0
margin_bottom = 41.0
rect_min_size = Vector2( 10, 10 )
mouse_filter = 0
custom_fonts/font = SubResource( 51 )
text = "W"
align = 1
valign = 1

[node name="X" type="Label" parent="computer input/TextureRect/Panel/GridContainer"]
margin_left = 70.0
margin_top = 30.0
margin_right = 80.0
margin_bottom = 41.0
rect_min_size = Vector2( 10, 10 )
mouse_filter = 0
custom_fonts/font = SubResource( 51 )
text = "X"
align = 1
valign = 1

[node name="Y" type="Label" parent="computer input/TextureRect/Panel/GridContainer"]
margin_left = 84.0
margin_top = 30.0
margin_right = 94.0
margin_bottom = 41.0
rect_min_size = Vector2( 10, 10 )
mouse_filter = 0
custom_fonts/font = SubResource( 51 )
text = "Y"
align = 1
valign = 1

[node name="Z" type="Label" parent="computer input/TextureRect/Panel/GridContainer"]
margin_left = 98.0
margin_top = 30.0
margin_right = 108.0
margin_bottom = 41.0
rect_min_size = Vector2( 10, 10 )
mouse_filter = 0
custom_fonts/font = SubResource( 51 )
text = "Z"
align = 1
valign = 1

[node name="BACKSPACE" type="Label" parent="computer input/TextureRect/Panel/GridContainer"]
margin_left = 112.0
margin_top = 30.0
margin_right = 122.0
margin_bottom = 41.0
rect_min_size = Vector2( 10, 10 )
mouse_filter = 0
custom_fonts/font = SubResource( 51 )
text = "<"
align = 1
valign = 1

[node name="Submit" type="Button" parent="computer input/TextureRect/Panel"]
margin_left = 91.5
margin_top = -40.0
margin_right = 148.5
margin_bottom = -18.0
focus_mode = 0
custom_fonts/font = SubResource( 57 )
enabled_focus_mode = 0
text = "SUBMIT"
flat = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Exit" type="Button" parent="computer input/TextureRect/Panel"]
margin_left = -23.0
margin_top = -87.0
margin_right = -10.0
margin_bottom = -73.0
rect_min_size = Vector2( 10, 10 )
focus_mode = 0
custom_styles/hover = ExtResource( 1 )
custom_styles/pressed = ExtResource( 1 )
custom_styles/normal = ExtResource( 1 )
custom_fonts/font = SubResource( 63 )
enabled_focus_mode = 0
text = "x"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="effects" type="CanvasLayer" parent="."]

[node name="ColorRect" type="ColorRect" parent="effects"]
material = SubResource( 75 )
anchor_right = 1.0
anchor_bottom = 1.0
rect_min_size = Vector2( 640, 360 )
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="options" type="CanvasLayer" parent="."]
script = ExtResource( 3 )

[node name="Settings Button" type="TextureButton" parent="options"]
anchor_left = 0.979
anchor_top = 0.029
anchor_right = 0.979
anchor_bottom = 0.029
margin_left = -40.0
margin_right = -15.0
margin_bottom = 25.0
mouse_filter = 1
texture_normal = ExtResource( 12 )
texture_pressed = ExtResource( 13 )
texture_hover = ExtResource( 12 )
expand = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Control" type="Control" parent="options"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect" type="ColorRect" parent="options/Control"]
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
color = Color( 0, 0, 0, 0.835294 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="VBoxContainer" type="VBoxContainer" parent="options/Control"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -250.0
margin_top = -125.0
margin_right = 250.0
margin_bottom = 125.0
size_flags_horizontal = 4
size_flags_vertical = 4
custom_constants/separation = 36
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Title" type="Label" parent="options/Control/VBoxContainer"]
margin_right = 500.0
margin_bottom = 30.0
custom_fonts/font = SubResource( 76 )
custom_colors/font_color = Color( 1, 1, 1, 1 )
text = "OPTIONS"
align = 1
valign = 1

[node name="HBoxContainer" type="HBoxContainer" parent="options/Control/VBoxContainer"]
margin_top = 66.0
margin_right = 500.0
margin_bottom = 96.0
custom_constants/separation = 128

[node name="sound" type="Label" parent="options/Control/VBoxContainer/HBoxContainer"]
margin_right = 168.0
margin_bottom = 30.0
custom_fonts/font = SubResource( 76 )
custom_colors/font_color = Color( 1, 1, 1, 1 )
text = "SOUND VOLUME"
align = 1
valign = 1

[node name="slider" type="HSlider" parent="options/Control/VBoxContainer/HBoxContainer"]
margin_left = 296.0
margin_right = 496.0
margin_bottom = 16.0
rect_min_size = Vector2( 200, 0 )
min_value = -20.0
max_value = 0.0
allow_lesser = true
tick_count = 10
ticks_on_borders = true

[node name="HBoxContainer2" type="HBoxContainer" parent="options/Control/VBoxContainer"]
margin_top = 132.0
margin_right = 500.0
margin_bottom = 182.0
rect_min_size = Vector2( 500, 50 )
custom_constants/separation = 200
alignment = 1

[node name="Restart" type="Button" parent="options/Control/VBoxContainer/HBoxContainer2"]
margin_right = 150.0
margin_bottom = 50.0
rect_min_size = Vector2( 150, 50 )
focus_mode = 0
enabled_focus_mode = 0
text = "RESTART"

[node name="Quit" type="Button" parent="options/Control/VBoxContainer/HBoxContainer2"]
margin_left = 350.0
margin_right = 500.0
margin_bottom = 50.0
rect_min_size = Vector2( 150, 50 )
focus_mode = 0
enabled_focus_mode = 0
text = "QUIT"

[node name="close" type="Button" parent="options/Control"]
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -87.4561
margin_top = -42.8302
margin_right = -19.4561
margin_bottom = -19.8302
custom_fonts/font = SubResource( 77 )
text = "X CLOSE"
flat = true

[connection signal="pressed" from="HUD/restart/VBoxContainer/restart" to="." method="_on_restart_pressed"]
[connection signal="pressed" from="HUD/restart/VBoxContainer/quit" to="." method="_on_quit_pressed"]
[connection signal="body_entered" from="sort/computer" to="." method="_on_computer_body_entered"]
[connection signal="body_entered" from="sort/cabinet" to="." method="_on_cabinet_body_entered"]
[connection signal="body_entered" from="sort/books" to="." method="_on_books_body_entered"]
[connection signal="body_entered" from="sort/seat" to="." method="_on_seat_body_entered"]
[connection signal="body_entered" from="sort/door" to="." method="_on_door_body_entered"]
[connection signal="gui_input" from="computer input/TextureRect" to="." method="_on_TextureRect_gui_input"]
[connection signal="gui_input" from="computer input/TextureRect/Panel/GridContainer/A" to="." method="_on_A_gui_input"]
[connection signal="gui_input" from="computer input/TextureRect/Panel/GridContainer/B" to="." method="_on_B_gui_input"]
[connection signal="gui_input" from="computer input/TextureRect/Panel/GridContainer/C" to="." method="_on_C_gui_input"]
[connection signal="gui_input" from="computer input/TextureRect/Panel/GridContainer/D" to="." method="_on_D_gui_input"]
[connection signal="gui_input" from="computer input/TextureRect/Panel/GridContainer/E" to="." method="_on_E_gui_input"]
[connection signal="gui_input" from="computer input/TextureRect/Panel/GridContainer/F" to="." method="_on_F_gui_input"]
[connection signal="gui_input" from="computer input/TextureRect/Panel/GridContainer/G" to="." method="_on_G_gui_input"]
[connection signal="gui_input" from="computer input/TextureRect/Panel/GridContainer/H" to="." method="_on_H_gui_input"]
[connection signal="gui_input" from="computer input/TextureRect/Panel/GridContainer/I" to="." method="_on_I_gui_input"]
[connection signal="gui_input" from="computer input/TextureRect/Panel/GridContainer/J" to="." method="_on_J_gui_input"]
[connection signal="gui_input" from="computer input/TextureRect/Panel/GridContainer/K" to="." method="_on_K_gui_input"]
[connection signal="gui_input" from="computer input/TextureRect/Panel/GridContainer/L" to="." method="_on_L_gui_input"]
[connection signal="gui_input" from="computer input/TextureRect/Panel/GridContainer/M" to="." method="_on_M_gui_input"]
[connection signal="gui_input" from="computer input/TextureRect/Panel/GridContainer/N" to="." method="_on_N_gui_input"]
[connection signal="gui_input" from="computer input/TextureRect/Panel/GridContainer/O" to="." method="_on_O_gui_input"]
[connection signal="gui_input" from="computer input/TextureRect/Panel/GridContainer/P" to="." method="_on_P_gui_input"]
[connection signal="gui_input" from="computer input/TextureRect/Panel/GridContainer/Q" to="." method="_on_Q_gui_input"]
[connection signal="gui_input" from="computer input/TextureRect/Panel/GridContainer/R" to="." method="_on_R_gui_input"]
[connection signal="gui_input" from="computer input/TextureRect/Panel/GridContainer/S" to="." method="_on_S_gui_input"]
[connection signal="gui_input" from="computer input/TextureRect/Panel/GridContainer/T" to="." method="_on_T_gui_input"]
[connection signal="gui_input" from="computer input/TextureRect/Panel/GridContainer/U" to="." method="_on_U_gui_input"]
[connection signal="gui_input" from="computer input/TextureRect/Panel/GridContainer/V" to="." method="_on_V_gui_input"]
[connection signal="gui_input" from="computer input/TextureRect/Panel/GridContainer/W" to="." method="_on_W_gui_input"]
[connection signal="gui_input" from="computer input/TextureRect/Panel/GridContainer/X" to="." method="_on_X_gui_input"]
[connection signal="gui_input" from="computer input/TextureRect/Panel/GridContainer/Y" to="." method="_on_Y_gui_input"]
[connection signal="gui_input" from="computer input/TextureRect/Panel/GridContainer/Z" to="." method="_on_Z_gui_input"]
[connection signal="gui_input" from="computer input/TextureRect/Panel/GridContainer/BACKSPACE" to="." method="_on_BACKSPACE_gui_input"]
[connection signal="pressed" from="computer input/TextureRect/Panel/Submit" to="." method="_on_Submit_pressed"]
[connection signal="pressed" from="computer input/TextureRect/Panel/Exit" to="." method="_on_Exit_pressed"]
[connection signal="pressed" from="options/Settings Button" to="options" method="_on_Settings_Button_pressed"]
[connection signal="value_changed" from="options/Control/VBoxContainer/HBoxContainer/slider" to="options" method="_on_slider_value_changed"]
[connection signal="pressed" from="options/Control/VBoxContainer/HBoxContainer2/Restart" to="options" method="_on_Restart_pressed"]
[connection signal="pressed" from="options/Control/VBoxContainer/HBoxContainer2/Quit" to="options" method="_on_Quit_pressed"]
[connection signal="pressed" from="options/Control/close" to="options" method="_on_close_pressed"]

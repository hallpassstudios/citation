[gd_scene load_steps=18 format=2]

[ext_resource path="res://scenes/levels/games/minigame/joystick.gd" type="Script" id=1]
[ext_resource path="res://scenes/levels/games/minigame/new_tiles.tres" type="TileSet" id=2]
[ext_resource path="res://sprites/ui/mobile_thumbstick.png" type="Texture" id=3]
[ext_resource path="res://sprites/ui/mobile_joystick.png" type="Texture" id=4]
[ext_resource path="res://scenes/levels/games/minigame/chunks/outside.gd" type="Script" id=6]

[sub_resource type="CircleShape2D" id=27]
radius = 64.0

[sub_resource type="DynamicFontData" id=1]
antialiased = false
font_path = "res://fonts/HungryPro.ttf"

[sub_resource type="DynamicFont" id=2]
size = 30
font_data = SubResource( 1 )

[sub_resource type="DynamicFont" id=6]
size = 12
font_data = SubResource( 1 )

[sub_resource type="StyleBoxFlat" id=7]
bg_color = Color( 0.870588, 0.403922, 1, 1 )
border_width_left = 1
border_width_top = 1
border_width_right = 1
border_width_bottom = 1
border_color = Color( 1, 1, 1, 1 )
anti_aliasing = false

[sub_resource type="StyleBoxFlat" id=8]
bg_color = Color( 0.133333, 0, 0.172549, 1 )
border_width_left = 1
border_width_top = 1
border_width_right = 1
border_width_bottom = 1

[sub_resource type="StyleBoxFlat" id=3]
bg_color = Color( 0.780392, 0, 1, 1 )

[sub_resource type="DynamicFontData" id=4]
font_path = "res://fonts/HungryPro.ttf"

[sub_resource type="DynamicFont" id=5]
font_data = SubResource( 4 )

[sub_resource type="RectangleShape2D" id=47]
extents = Vector2( 4, 5 )

[sub_resource type="Shader" id=63]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/VHS-and-CRT-monitor-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

//*** IMPORTANT! ***/ 
// - If you are using this shader to affect the node it is applied to set 'overlay' to false (unchecked in the instepctor).
// - If you are using this shader as an overlay, and want the shader to affect the nodes below in the Scene hierarchy,
//   set 'overlay' to true (checked in the inspector).
// On Mac there is potentially a bug causing this to not work properly. If that is the case and you want to use the shader as an overlay
// change all \"overlay ? SCREEN_TEXTURE : TEXTURE\" to only \"SCREEN_TEXTURE\" on lines 129-140, and \"vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV);\"
// to \"vec2 uv = warp(SCREEN_UV);\" on line 98.
uniform bool overlay = false;

uniform float scanlines_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float scanlines_width : hint_range(0.0, 0.5) = 0.25;
uniform float grille_opacity : hint_range(0.0, 1.0) = 0.3;
uniform vec2 resolution = vec2(640.0, 480.0); // Set the number of rows and columns the texture will be divided in. Scanlines and grille will make a square based on these values

uniform bool pixelate = true; // Fill each square (\"pixel\") with a sampled color, creating a pixel look and a more accurate representation of how a CRT monitor would work.

uniform bool roll = true;
uniform float roll_speed = 8.0; // Positive values are down, negative are up
uniform float roll_size : hint_range(0.0, 100.0) = 15.0;
uniform float roll_variation : hint_range(0.1, 5.0) = 1.8; // This valie is not an exact science. You have to play around with the value to find a look you like. How this works is explained in the code below.
uniform float distort_intensity : hint_range(0.0, 0.2) = 0.05; // The distortion created by the rolling effect.

uniform float noise_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float noise_speed = 5.0; // There is a movement in the noise pattern that can be hard to see first. This sets the speed of that movement.

uniform float static_noise_intensity : hint_range(0.0, 1.0) = 0.06;

uniform float aberration : hint_range(-1.0, 1.0) = 0.03; // Chromatic aberration, a distortion on each color channel.
uniform float brightness = 1.4; // When adding scanline gaps and grille the image can get very dark. Brightness tries to compensate for that.
uniform bool discolor = true; // Add a discolor effect simulating a VHS

uniform float warp_amount :hint_range(0.0, 5.0) = 1.0; // Warp the texture edges simulating the curved glass of a CRT monitor or old TV.
uniform bool clip_warp = false;

uniform float vignette_intensity = 0.4; // Size of the vignette, how far towards the middle it should go.
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

// Generate a Perlin noise used by the distortion effects
float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	return uv + delta * delta_offset;
}

// Adds a black border to hide stretched pixel created by the warp effect
float border (vec2 uv){
	float radius = min(warp_amount, 0.08);
	radius = max(min(min(abs(radius * 2.0), abs(1.0)), abs(1.0)), 1e-5);
	vec2 abs_uv = abs(uv * 2.0 - 1.0) - vec2(1.0, 1.0) + radius;
	float dist = length(max(vec2(0.0), abs_uv)) / radius;
	float square = smoothstep(0.96, 1.0, dist);
	return clamp(1.0 - square, 0.0, 1.0);
}

// Adds a vignette shadow to the edges of the image
float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment()
{
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); // Warp the uv. uv will be used in most cases instead of UV to keep the warping
	vec2 text_uv = uv;
	vec2 roll_uv = vec2(0.0);
	float time = roll ? TIME : 0.0;
	

	// Pixelate the texture based on the given resolution.
	if (pixelate)
	{
		text_uv = ceil(uv * resolution) / resolution;
	}
	
	// Create the rolling effect. We need roll_line a bit later to make the noise effect.
	// That is why this runs if roll is true OR noise_opacity is over 0.
	float roll_line = 0.0;
	if (roll || noise_opacity > 0.0)
	{
		// Create the areas/lines where the texture will be distorted.
		roll_line = smoothstep(0.3, 0.9, sin(uv.y * roll_size - (time * roll_speed) ) );
		// Create more lines of a different size and apply to the first set of lines. This creates a bit of variation.
		roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * roll_size * roll_variation - (time * roll_speed * roll_variation) ) );
		// Distort the UV where where the lines are
		roll_uv = vec2(( roll_line * distort_intensity * (1.-UV.x)), 0.0);
	}
	
	vec4 text;
	if (roll)
	{
		// If roll is true distort the texture with roll_uv. The texture is split up into RGB to 
		// make some chromatic aberration. We apply the aberration to the red and green channels accorging to the aberration parameter
		// and intensify it a bit in the roll distortion.
		text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(aberration, 0.0) * .1 ).g;
		text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
		text.a = 1.0;
	}
	else
	{
		// If roll is false only apply the aberration without any distorion. The aberration values are very small so the .1 is only 
		// to make the slider in the Inspector less sensitive.
		text.r = texture(SCREEN_TEXTURE, text_uv + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv - vec2(aberration, 0.0) * .1).g;
		text.b = texture(SCREEN_TEXTURE, text_uv).b;
		text.a = 1.0;
	}
	
	float r = text.r;
	float g = text.g;
	float b = text.b;
	
	uv = warp(UV);
	
	// CRT monitors don't have pixels but groups of red, green and blue dots or lines, called grille. We isolate the texture's color channels 
	// and divide it up in 3 offsetted lines to show the red, green and blue colors next to each other, with a small black gap between.
	if (grille_opacity > 0.0){
		
		float g_r = smoothstep(0.85, 0.95, abs(sin(uv.x * (resolution.x * 3.14159265))));
		r = mix(r, r * g_r, grille_opacity);
		
		float g_g = smoothstep(0.85, 0.95, abs(sin(1.05 + uv.x * (resolution.x * 3.14159265))));
		g = mix(g, g * g_g, grille_opacity);
		
		float b_b = smoothstep(0.85, 0.95, abs(sin(2.1 + uv.x * (resolution.x * 3.14159265))));
		b = mix(b, b * b_b, grille_opacity);
		
	}
	
	// Apply the grille to the texture's color channels and apply Brightness. Since the grille and the scanlines (below) make the image very dark you
	// can compensate by increasing the brightness.
	text.r = clamp(r * brightness, 0.0, 1.0);
	text.g = clamp(g * brightness, 0.0, 1.0);
	text.b = clamp(b * brightness, 0.0, 1.0);
	
	// Scanlines are the horizontal lines that make up the image on a CRT monitor. 
	// Here we are actual setting the black gap between each line, which I guess is not the right definition of the word, but you get the idea  
	float scanlines = 0.5;
	if (scanlines_opacity > 0.0)
	{
		// Same technique as above, create lines with sine and applying it to the texture. Smoothstep to allow setting the line size.
		scanlines = smoothstep(scanlines_width, scanlines_width + 0.5, abs(sin(uv.y * (resolution.y * 3.14159265))));
		text.rgb = mix(text.rgb, text.rgb * vec3(scanlines), scanlines_opacity);
	}
	
	// Apply the banded noise.
	if (noise_opacity > 0.0)
	{
		// Generate a noise pattern that is very stretched horizontally, and animate it with noise_speed
		float noise = smoothstep(0.4, 0.5, noise(uv * vec2(2.0, 200.0) + vec2(10.0, (TIME * (noise_speed))) ) );
		
		// We use roll_line (set above) to define how big the noise should be vertically (multiplying cuts off all black parts).
		// We also add in some basic noise with random() to break up the noise pattern above. The noise is sized according to 
		// the resolution value set in the inspector. If you don't like this look you can 
		// change \"ceil(uv * resolution) / resolution\" to only \"uv\" to make it less pixelated. Or multiply resolution with som value
		// greater than 1.0 to make them smaller.
		roll_line *= noise * scanlines * clamp(random((ceil(uv * resolution) / resolution) + vec2(TIME * 0.8, 0.0)).x + 0.8, 0.0, 1.0);
		// Add it to the texture based on noise_opacity
		text.rgb = clamp(mix(text.rgb, text.rgb + roll_line, noise_opacity), vec3(0.0), vec3(1.0));
	}
	
	// Apply static noise by generating it over the whole screen in the same way as above
	if (static_noise_intensity > 0.0)
	{
		text.rgb += clamp(random((ceil(uv * resolution) / resolution) + fract(TIME)).x, 0.0, 1.0) * static_noise_intensity;
	}
	
	// Apply a black border to hide imperfections caused by the warping.
	// Also apply the vignette
	text.rgb *= border(uv);
	text.rgb *= vignette(uv);
	// Hides the black border and make that area transparent. Good if you want to add the the texture on top an image of a TV or monitor.
	if (clip_warp)
	{
		text.a = border(uv);
	}
	
	// Apply discoloration to get a VHS look (lower saturation and higher contrast)
	// You can play with the values below or expose them in the Inspector.
	float saturation = 0.5;
	float contrast = 1.2;
	if (discolor)
	{
		// Saturation
		vec3 greyscale = vec3(text.r + text.g + text.b) / 3.;
		text.rgb = mix(text.rgb, greyscale, saturation);
		
		// Contrast
		float midpoint = pow(0.5, 2.2);
		text.rgb = (text.rgb - vec3(midpoint)) * contrast + midpoint;
	}
	
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id=64]
shader = SubResource( 63 )
shader_param/overlay = true
shader_param/scanlines_opacity = 0.861
shader_param/scanlines_width = 0.2
shader_param/grille_opacity = 0.143
shader_param/resolution = Vector2( 640, 480 )
shader_param/pixelate = true
shader_param/roll = true
shader_param/roll_speed = 2.0
shader_param/roll_size = 15.0
shader_param/roll_variation = 1.8
shader_param/distort_intensity = 0.028
shader_param/noise_opacity = 0.1
shader_param/noise_speed = 1.0
shader_param/static_noise_intensity = 0.06
shader_param/aberration = -1.0
shader_param/brightness = 1.4
shader_param/discolor = true
shader_param/warp_amount = 0.391
shader_param/clip_warp = false
shader_param/vignette_intensity = 0.4
shader_param/vignette_opacity = 0.5

[node name="hidden" type="Node2D"]
script = ExtResource( 6 )

[node name="joystick" type="CanvasLayer" parent="."]
script = ExtResource( 1 )

[node name="TouchScreenButton" type="TouchScreenButton" parent="joystick"]
visible = false
modulate = Color( 1, 1, 1, 0.145098 )
normal = ExtResource( 4 )
shape = SubResource( 27 )
visibility_mode = 1

[node name="touch sprite" type="Sprite" parent="joystick"]
visible = false
position = Vector2( 32, 32 )
texture = ExtResource( 3 )

[node name="HUD" type="CanvasLayer" parent="."]

[node name="restart" type="Control" parent="HUD"]
pause_mode = 2
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect" type="ColorRect" parent="HUD/restart"]
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0.121569, 0.0980392, 0.0980392, 0.564706 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="VBoxContainer" type="VBoxContainer" parent="HUD/restart"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -169.0
margin_top = -60.0
margin_right = 169.0
margin_bottom = 60.0
custom_constants/separation = 10
__meta__ = {
"_edit_use_anchors_": false
}

[node name="title" type="Label" parent="HUD/restart/VBoxContainer"]
margin_right = 338.0
margin_bottom = 28.0
custom_fonts/font = SubResource( 2 )
text = "SORRY, YOU DIDN'T SUCCEED."
align = 1
valign = 1

[node name="fun text" type="Label" parent="HUD/restart/VBoxContainer"]
margin_top = 38.0
margin_right = 338.0
margin_bottom = 49.0
custom_fonts/font = SubResource( 6 )
custom_colors/font_color = Color( 0, 1, 0.823529, 1 )
text = "try again, joe is counting on you!"
align = 1

[node name="restart" type="Button" parent="HUD/restart/VBoxContainer"]
margin_top = 59.0
margin_right = 338.0
margin_bottom = 74.0
focus_mode = 0
mouse_filter = 1
custom_styles/hover = SubResource( 7 )
custom_styles/pressed = SubResource( 8 )
custom_styles/normal = SubResource( 3 )
custom_fonts/font = SubResource( 5 )
enabled_focus_mode = 0
text = "TRY AGAIN!"

[node name="quit" type="Button" parent="HUD/restart/VBoxContainer"]
margin_top = 84.0
margin_right = 338.0
margin_bottom = 105.0
focus_mode = 0
mouse_filter = 1
custom_fonts/font = SubResource( 5 )
enabled_focus_mode = 0
text = "QUIT GAME"
flat = true

[node name="sort" type="YSort" parent="."]

[node name="spawner" type="Position2D" parent="sort"]
position = Vector2( 7.62939e-06, 0 )

[node name="doors" type="TileMap" parent="sort"]
z_index = 2
tile_set = ExtResource( 2 )
cell_size = Vector2( 10, 10 )
show_collision = true
format = 1
tile_data = PoolIntArray( -1048576, 112, 0, -786435, 1610612834, 0, -786434, 1610612837, 0, -786433, 1610612837, 0, -851968, 1610612837, 0, -851967, 1610612837, 0, -851966, 1610612837, 0, -851965, -1073741726, 0, -720899, 97, 0, -786429, 97, 0, -655363, 97, 0, -720896, 124, 0, -720893, 97, 0, -589827, 97, 0, -655357, 97, 0, -524291, 97, 0, -589821, 97, 0, -458755, 102, 0, -458754, 101, 0, -458753, 101, 0, -524288, 108, 0, -524287, 101, 0, -524286, 101, 0, -524285, 98, 0, -458752, 103, 0, -262150, 158, 0, -262149, 162, 0, -262148, 157, 0, -327676, 158, 0, -327675, 162, 0, -327674, 157, 0 )

[node name="path tiles" type="TileMap" parent="sort"]
position = Vector2( 7.62939e-06, 0 )
tile_set = ExtResource( 2 )
cell_size = Vector2( 10, 10 )
cell_quadrant_size = 10
cell_tile_origin = 1
show_collision = true
format = 1
tile_data = PoolIntArray( -65536, 104, 0 )

[node name="collision tiles" type="TileMap" parent="sort"]
position = Vector2( 7.62939e-06, 0 )
tile_set = ExtResource( 2 )
cell_size = Vector2( 10, 10 )
show_collision = true
format = 1
tile_data = PoolIntArray( -983041, 49, 0, -1048575, 49, 0, -1048574, 54, 0 )

[node name="ground tiles" type="TileMap" parent="sort"]
position = Vector2( 7.62939e-06, 0 )
tile_set = ExtResource( 2 )
cell_size = Vector2( 10, 10 )
show_collision = true
format = 1
tile_data = PoolIntArray( -2949122, 121, 0, -2949121, 121, 0, -2883590, 121, 0, -2883589, 121, 0, -2883588, 121, 0, -2883587, 121, 0, -2883586, 121, 0, -2883585, 118, 0, -2949120, 118, 0, -2949119, 118, 0, -2949118, 118, 0, -2949117, 118, 0, -2818060, 118, 0, -2818059, 118, 0, -2818058, 116, 0, -2818057, 116, 0, -2818056, 116, 0, -2818055, 121, 0, -2818054, 121, 0, -2818053, 121, 0, -2818052, 121, 0, -2818051, 121, 0, -2883582, 121, 0, -2883581, 118, 0, -2752524, 118, 0, -2752523, 116, 0, -2752522, 116, 0, -2752521, 121, 0, -2752520, 121, 0, -2752519, 121, 0, -2752518, 118, 0, -2752517, 121, 0, -2752516, 118, 0, -2818046, 121, 0, -2818045, 118, 0, -2818044, 118, 0, -2818043, 118, 0, -2818037, 121, 0, -2818036, 121, 0, -2818035, 121, 0, -2818034, 121, 0, -2818033, 121, 0, -2818032, 118, 0, -2818031, 118, 0, -2818030, 118, 0, -2686989, 118, 0, -2686988, 116, 0, -2686987, 121, 0, -2686986, 121, 0, -2686985, 121, 0, -2686982, 121, 0, -2752507, 118, 0, -2752506, 118, 0, -2752505, 118, 0, -2752504, 118, 0, -2752495, 121, 0, -2752494, 118, 0, -2621453, 118, 0, -2621452, 116, 0, -2621447, 121, 0, -2621446, 121, 0, -2686969, 118, 0, -2686959, 118, 0, -2686958, 118, 0, -2555918, 121, 0, -2555917, 118, 0, -2555916, 116, 0, -2621423, 118, 0, -2621422, 118, 0, -2490382, 121, 0, -2490381, 118, 0, -2490380, 116, 0, -2490379, 116, 0, -2555886, 118, 0, -2424846, 121, 0, -2424845, 118, 0, -2424844, 118, 0, -2490350, 118, 0, -2490349, 118, 0, -2359309, 121, 0, -2359308, 118, 0, -2359307, 118, 0, -2424814, 121, 0, -2424813, 118, 0, -2293774, 116, 0, -2293773, 121, 0, -2293772, 121, 0, -2293771, 118, 0, -2359277, 121, 0, -2359276, 118, 0, -2359275, 118, 0, -2359274, 118, 0, -2359273, 118, 0, -2228238, 116, 0, -2228237, 116, 0, -2228236, 118, 0, -2228235, 118, 0, -2293741, 121, 0, -2293740, 121, 0, -2293737, 118, 0, -2162701, 116, 0, -2162700, 116, 0, -2228204, 121, 0, -2228203, 121, 0, -2228202, 118, 0, -2228201, 118, 0, -2097164, 116, 0, -2162667, 121, 0, -2162666, 118, 0, -2031628, 116, 0, -2031627, 116, 0, -2097131, 118, 0, -2097130, 118, 0, -1966094, 119, 0, -1966093, 118, 0, -1966092, 118, 0, -2031595, 118, 0, -1900558, 119, 0, -1900557, 118, 0, -1966059, 118, 0, -1966058, 117, 0, -1966057, 117, 0, -1835022, 118, 0, -1835021, 119, 0, -1900523, 117, 0, -1900522, 117, 0, -1769487, 116, 0, -1769486, 118, 0, -1769485, 119, 0, -1834987, 117, 0, -1703952, 118, 0, -1703951, 116, 0, -1703950, 116, 0, -1703949, 119, 0, -1703948, 119, 0, -1769451, 117, 0, -1638414, 116, 0, -1638413, 116, 0, -1638412, 119, 0, -1703915, 117, 0, -1572878, 121, 0, -1572877, 116, 0, -1572876, 116, 0, -1638379, 117, 0, -1507342, 119, 0, -1507341, 119, 0, -1572843, 121, 0, -1441807, 119, 0, -1441806, 119, 0, -1507308, 121, 0, -1507307, 121, 0, -1376272, 119, 0, -1376271, 119, 0, -1376270, 121, 0, -1441772, 121, 0, -1441771, 117, 0, -1310737, 119, 0, -1310736, 121, 0, -1310735, 121, 0, -1376237, 117, 0, -1376236, 117, 0, -1245202, 119, 0, -1245201, 117, 0, -1245200, 117, 0, -1310701, 117, 0, -1179666, 117, 0, -1179665, 117, 0, -1245166, 117, 0, -1245165, 117, 0, -1114131, 117, 0, -1114130, 117, 0, -1114129, 119, 0, -1114116, 12, 0, -1179630, 117, 0, -1048593, 119, 0, -1048580, 6, 0, -1048579, 12, 0, -1048577, 35, 0, -1114112, 63, 0, -1114111, 35, 0, -1114107, 12, 0, -1114094, 117, 0, -983057, 119, 0, -983056, 119, 0, -983049, 12, 0, -983042, 73, 0, -1048571, 20, 0, -1048570, 7, 0, -1048568, 12, 0, -1048559, 121, 0, -1048558, 117, 0, -1048557, 117, 0, -917521, 119, 0, -917520, 119, 0, -917514, 6, 0, -917513, 12, 0, -917510, 12, 0, -917507, 6, 0, -917506, 19, 0, -983035, 12, 0, -983033, 12, 0, -983024, 116, 0, -983023, 116, 0, -983022, 116, 0, -851985, 119, 0, -851984, 119, 0, -851978, 12, 0, -851975, 6, 0, -851969, 6, 0, -917502, 13, 0, -917500, 13, 0, -917499, 12, 0, -917498, 19, 0, -917488, 116, 0, -917487, 121, 0, -786450, 119, 0, -786449, 119, 0, -786448, 116, 0, -786439, 12, 0, -786438, 12, 0, -786436, 12, 0, -851962, 13, 0, -851952, 116, 0, -851951, 121, 0, -851950, 116, 0, -720912, 116, 0, -720911, 116, 0, -720903, 19, 0, -720901, 6, 0, -720897, 6, 0, -786430, 6, 0, -786416, 121, 0, -786415, 116, 0, -786414, 116, 0, -655376, 118, 0, -655375, 116, 0, -655370, 19, 0, -655367, 6, 0, -655366, 12, 0, -655362, 6, 0, -720894, 7, 0, -720891, 13, 0, -720889, 6, 0, -720881, 121, 0, -720880, 116, 0, -720879, 116, 0, -589840, 117, 0, -589839, 117, 0, -589835, 6, 0, -589831, 12, 0, -589826, 12, 0, -589825, 12, 0, -655358, 6, 0, -655345, 116, 0, -655344, 116, 0, -524305, 118, 0, -524304, 119, 0, -524303, 117, 0, -589823, 6, 0, -589814, 20, 0, -589810, 116, 0, -589809, 116, 0, -458768, 118, 0, -458767, 121, 0, -458758, 19, 0, -524275, 116, 0, -524274, 116, 0, -524273, 121, 0, -393232, 118, 0, -393231, 121, 0, -393226, 20, 0, -393224, 20, 0, -458739, 116, 0, -458738, 121, 0, -327696, 119, 0, -327695, 121, 0, -393204, 116, 0, -393203, 116, 0, -262160, 119, 0, -262159, 121, 0, -262158, 121, 0, -327670, 19, 0, -327668, 116, 0, -196624, 118, 0, -196623, 118, 0, -196622, 121, 0, -262133, 121, 0, -262132, 116, 0, -131087, 118, 0, -131086, 119, 0, -131085, 121, 0, -131077, 20, 0, -196597, 120, 0, -196596, 116, 0, -196595, 116, 0, -65550, 118, 0, -65549, 121, 0, -131060, 120, 0, -131059, 116, 0, -131058, 116, 0, -14, 118, 0, -13, 121, 0, -65524, 121, 0, -65523, 121, 0, -65522, 116, 0, 65522, 118, 0, 65523, 118, 0, 65524, 118, 0, 65525, 119, 0, 65526, 118, 0, 65527, 121, 0, 13, 121, 0, 14, 116, 0, 131060, 118, 0, 131061, 119, 0, 131062, 118, 0, 131063, 118, 0, 131064, 119, 0, 131065, 121, 0, 65544, 116, 0, 65547, 120, 0, 65548, 121, 0, 65549, 116, 0, 65550, 116, 0, 196599, 118, 0, 196600, 119, 0, 196601, 121, 0, 196602, 119, 0, 196603, 121, 0, 131078, 116, 0, 131079, 116, 0, 131080, 120, 0, 131081, 120, 0, 131082, 116, 0, 131083, 116, 0, 131084, 116, 0, 131085, 116, 0, 262136, 119, 0, 262137, 119, 0, 262139, 121, 0, 262140, 121, 0, 262141, 119, 0, 262142, 119, 0, 262143, 119, 0, 196608, 119, 0, 196609, 119, 0, 196610, 121, 0, 196612, 116, 0, 196613, 116, 0, 196614, 120, 0, 196615, 120, 0, 196616, 116, 0, 196617, 116, 0, 196619, 116, 0, 327673, 119, 0, 327674, 119, 0, 327675, 119, 0, 327676, 119, 0, 327677, 119, 0, 262146, 119, 0, 262147, 119, 0, 262148, 119, 0, 262149, 120, 0, 262150, 120, 0, 262151, 116, 0, 262152, 116, 0, 393210, 119, 0, 393211, 119, 0, 327683, 120, 0, 327684, 120, 0 )

[node name="prop tiles" type="TileMap" parent="sort"]
position = Vector2( 7.62939e-06, 0 )
tile_set = ExtResource( 2 )
cell_size = Vector2( 10, 10 )
show_collision = true
format = 1
tile_data = PoolIntArray( -393216, 103, 0, -327680, 103, 0, -262144, 103, 0, -196608, 103, 0, -131072, 97, 0, -65536, 110, 0, 196608, 121, 0, 196609, 121, 0 )

[node name="exit" type="Area2D" parent="sort"]
position = Vector2( -120, 230 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="sort/exit"]
position = Vector2( 125, -385 )
shape = SubResource( 47 )

[node name="effects" type="CanvasLayer" parent="."]

[node name="ColorRect" type="ColorRect" parent="effects"]
material = SubResource( 64 )
anchor_right = 1.0
anchor_bottom = 1.0
rect_min_size = Vector2( 640, 360 )
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}

[connection signal="pressed" from="HUD/restart/VBoxContainer/restart" to="." method="_on_restart_pressed"]
[connection signal="pressed" from="HUD/restart/VBoxContainer/quit" to="." method="_on_quit_pressed"]
[connection signal="body_entered" from="sort/exit" to="." method="_on_exit_body_entered"]
